"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.wrapHttpRequestActionBuilder = void 0;
const core_1 = require("@gatling.io/core");
__exportStar(require("./body"), exports);
__exportStar(require("./request"), exports);
const requestWithParamsActionBuilderImpl = (jvmBuilder, wrap) => ({
    queryParam: (name, value) => {
        if (typeof name === "function") {
            if (typeof value === "function") {
                return wrap(jvmBuilder.queryParam((0, core_1.underlyingSessionTo)(name), (0, core_1.underlyingSessionTo)(value)));
            }
            else if (typeof value === "string") {
                // FIXME it shows the value:any overload?
                return wrap(jvmBuilder.queryParam((0, core_1.underlyingSessionTo)(name), value));
            }
            else {
                // FIXME it shows the value:func overload?
                return wrap(jvmBuilder.queryParam((0, core_1.underlyingSessionTo)(name), value));
            }
        }
        else {
            if (typeof value === "function") {
                // FIXME it shows the value:any overload?
                return wrap(jvmBuilder.queryParam(name, (0, core_1.underlyingSessionTo)(value)));
            }
            else if (typeof value === "string") {
                // FIXME it shows the value:any overload?
                return wrap(jvmBuilder.queryParam(name, value));
            }
            else {
                return wrap(jvmBuilder.queryParam(name, value));
            }
        }
    },
    multivaluedQueryParam: (name, values) => {
        if (typeof name === "function") {
            if (typeof values === "function") {
                return wrap(jvmBuilder.multivaluedQueryParam((0, core_1.underlyingSessionTo)(name), (0, core_1.underlyingSessionToJava)(values)));
            }
            else if (typeof values === "string") {
                return wrap(jvmBuilder.multivaluedQueryParam((0, core_1.underlyingSessionTo)(name), values));
            }
            else {
                return wrap(jvmBuilder.multivaluedQueryParam((0, core_1.underlyingSessionTo)(name), values));
            }
        }
        else {
            if (typeof values === "function") {
                return wrap(jvmBuilder.multivaluedQueryParam(name, (0, core_1.underlyingSessionToJava)(values)));
            }
            else if (typeof values === "string") {
                return wrap(jvmBuilder.multivaluedQueryParam(name, values));
            }
            else {
                return wrap(jvmBuilder.multivaluedQueryParam(name, values));
            }
        }
    },
    queryParamMap: (map) => {
        if (typeof map === "function") {
            return wrap(jvmBuilder.queryParamMap((0, core_1.underlyingSessionToJava)(map)));
        }
        else if (typeof map === "object") {
            return wrap(jvmBuilder.queryParamMap(map));
        }
        else {
            return wrap(jvmBuilder.queryParamMap(map));
        }
    },
    header: (name, value) => wrap(typeof value === "function" ? jvmBuilder.header(name, (0, core_1.underlyingSessionTo)(value)) : jvmBuilder.header(name, value)),
    headers: (headers) => wrap(jvmBuilder.headers((0, core_1.asJava)(headers))),
    ignoreProtocolHeaders: () => wrap(jvmBuilder.ignoreProtocolHeaders()),
    basicAuth: (username, password) => wrap(typeof username === "function"
        ? typeof password === "function"
            ? jvmBuilder.basicAuth((0, core_1.underlyingSessionTo)(username), (0, core_1.underlyingSessionTo)(password))
            : jvmBuilder.basicAuth((0, core_1.underlyingSessionTo)(username), password)
        : typeof password === "function"
            ? jvmBuilder.basicAuth(username, (0, core_1.underlyingSessionTo)(password))
            : jvmBuilder.basicAuth(username, password)),
    digestAuth: (username, password) => wrap(typeof username === "function"
        ? typeof password === "function"
            ? jvmBuilder.digestAuth((0, core_1.underlyingSessionTo)(username), (0, core_1.underlyingSessionTo)(password))
            : jvmBuilder.digestAuth((0, core_1.underlyingSessionTo)(username), password)
        : typeof password === "function"
            ? jvmBuilder.digestAuth(username, (0, core_1.underlyingSessionTo)(password))
            : jvmBuilder.digestAuth(username, password)),
    disableUrlEncoding: () => wrap(jvmBuilder.disableUrlEncoding()),
    proxy: (proxy) => wrap(jvmBuilder.proxy(proxy._underlying)),
    signWithOAuth1: (consumerKey, clientSharedSecret, token, tokenSecret) => wrap(typeof consumerKey === "function" &&
        typeof clientSharedSecret === "function" &&
        typeof token === "function" &&
        typeof tokenSecret === "function"
        ? jvmBuilder.signWithOAuth1((0, core_1.underlyingSessionTo)(consumerKey), (0, core_1.underlyingSessionTo)(clientSharedSecret), (0, core_1.underlyingSessionTo)(token), (0, core_1.underlyingSessionTo)(tokenSecret))
        : jvmBuilder.signWithOAuth1(consumerKey, clientSharedSecret, token, tokenSecret))
});
const requestWithBodyActionBuilderImpl = (jvmBuilder, wrap) => ({
    body: (body) => wrap(jvmBuilder.body(body._underlying)),
    bodyPart: (part) => wrap(jvmBuilder.bodyPart(part._underlying)),
    bodyParts: (...parts) => wrap(jvmBuilder.bodyParts(parts.map((part) => part._underlying))),
    asMultipartForm: () => wrap(jvmBuilder.asMultipartForm()),
    asFormUrlEncoded: () => wrap(jvmBuilder.asFormUrlEncoded()),
    formParam: (key, value) => {
        if (typeof key === "function") {
            if (typeof value === "function") {
                return wrap(jvmBuilder.formParam((0, core_1.underlyingSessionTo)(key), (0, core_1.underlyingSessionTo)(value)));
            }
            else if (typeof value === "string") {
                // FIXME it shows the value:any overload?
                return wrap(jvmBuilder.formParam((0, core_1.underlyingSessionTo)(key), value));
            }
            else {
                // FIXME it shows the value:func overload?
                return wrap(jvmBuilder.formParam((0, core_1.underlyingSessionTo)(key), value));
            }
        }
        else {
            if (typeof value === "function") {
                // FIXME it shows the value:any overload?
                return wrap(jvmBuilder.formParam(key, (0, core_1.underlyingSessionTo)(value)));
            }
            else if (typeof value === "string") {
                // FIXME it shows the value:any overload?
                return wrap(jvmBuilder.formParam(key, value));
            }
            else {
                return wrap(jvmBuilder.formParam(key, value));
            }
        }
    },
    multivaluedFormParam: (key, values) => {
        if (typeof key === "function") {
            if (typeof values === "function") {
                return wrap(jvmBuilder.multivaluedFormParam((0, core_1.underlyingSessionTo)(key), (0, core_1.underlyingSessionToJava)(values)));
            }
            else if (typeof values === "string") {
                throw Error(`multivaluedFormParam() called with invalid arguments ${key}, ${values}`);
            }
            else {
                return wrap(jvmBuilder.multivaluedFormParam((0, core_1.underlyingSessionTo)(key), values));
            }
        }
        else {
            if (typeof values === "function") {
                return wrap(jvmBuilder.multivaluedFormParam(key, (0, core_1.underlyingSessionToJava)(values)));
            }
            else if (typeof values === "string") {
                return wrap(jvmBuilder.multivaluedFormParam(key, values));
            }
            else {
                return wrap(jvmBuilder.multivaluedFormParam(key, values));
            }
        }
    },
    formParamMap: (map) => wrap(typeof map === "function"
        ? jvmBuilder["formParamMap(java.util.function.Function)"]((0, core_1.underlyingSessionToJava)(map))
        : jvmBuilder.formParamMap(map)),
    form: (form) => wrap(typeof form === "function" ? jvmBuilder.form((0, core_1.underlyingSessionToJava)(form)) : jvmBuilder.form(form)),
    formUpload: (name, filePath) => wrap(typeof name === "function"
        ? typeof filePath === "function"
            ? jvmBuilder.formUpload((0, core_1.underlyingSessionTo)(name), (0, core_1.underlyingSessionTo)(filePath))
            : jvmBuilder.formUpload((0, core_1.underlyingSessionTo)(name), filePath)
        : typeof filePath === "function"
            ? jvmBuilder.formUpload(name, (0, core_1.underlyingSessionTo)(filePath))
            : jvmBuilder.formUpload(name, filePath)),
    asJson: () => wrap(jvmBuilder.asJson()),
    asXml: () => wrap(jvmBuilder.asXml())
});
const requestActionBuilderImpl = (jvmBuilder, wrap) => ({
    check: (...checks) => wrap(jvmBuilder.check(checks.map((c) => c._underlying))),
    checkIf: (condition) => (0, core_1.wrapCondition)(typeof condition === "string"
        ? jvmBuilder.checkIf(condition)
        : jvmBuilder.checkIf((0, core_1.underlyingSessionTo)(condition)), wrap),
    ignoreProtocolChecks: () => wrap(jvmBuilder.ignoreProtocolChecks()),
    silent: () => wrap(jvmBuilder.silent()),
    notSilent: () => wrap(jvmBuilder.notSilent()),
    disableFollowRedirect: () => wrap(jvmBuilder.disableFollowRedirect()),
    // TODO transformResponse: (f: (response: Response, session: Session) => Response): T =>
    //  wrap(jvmBuilder.transformResponse(wrapBiCallback(underlyingResponseTransform(f))))
    resources: (...res) => wrap(jvmBuilder.resources(res.map((r) => r._underlying))),
    requestTimeout: (duration) => wrap(jvmBuilder.requestTimeout((0, core_1.toJvmDuration)(duration)))
});
const wrapHttpRequestActionBuilder = (_underlying) => ({
    _underlying,
    ...requestWithParamsActionBuilderImpl(_underlying, exports.wrapHttpRequestActionBuilder),
    ...requestWithBodyActionBuilderImpl(_underlying, exports.wrapHttpRequestActionBuilder),
    ...requestActionBuilderImpl(_underlying, exports.wrapHttpRequestActionBuilder)
});
exports.wrapHttpRequestActionBuilder = wrapHttpRequestActionBuilder;
