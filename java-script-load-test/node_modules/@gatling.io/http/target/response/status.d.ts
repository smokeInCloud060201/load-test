export declare class HttpResponseStatus {
    readonly code: number;
    readonly reasonPhrase: string;
    /**
     * 100 Continue
     */
    static readonly CONTINUE: HttpResponseStatus;
    /**
     * 101 Switching Protocols
     */
    static readonly SWITCHING_PROTOCOLS: HttpResponseStatus;
    /**
     * 102 Processing (WebDAV, RFC2518)
     */
    static readonly PROCESSING: HttpResponseStatus;
    /**
     * 103 Early Hints (RFC 8297)
     */
    static readonly EARLY_HINTS: HttpResponseStatus;
    /**
     * 200 OK
     */
    static readonly OK: HttpResponseStatus;
    /**
     * 201 Created
     */
    static readonly CREATED: HttpResponseStatus;
    /**
     * 202 Accepted
     */
    static readonly ACCEPTED: HttpResponseStatus;
    /**
     * 203 Non-Authoritative Information (since HTTP/1.1)
     */
    static readonly NON_AUTHORITATIVE_INFORMATION: HttpResponseStatus;
    /**
     * 204 No Content
     */
    static readonly NO_CONTENT: HttpResponseStatus;
    /**
     * 205 Reset Content
     */
    static readonly RESET_CONTENT: HttpResponseStatus;
    /**
     * 206 Partial Content
     */
    static readonly PARTIAL_CONTENT: HttpResponseStatus;
    /**
     * 207 Multi-Status (WebDAV, RFC2518)
     */
    static readonly MULTI_STATUS: HttpResponseStatus;
    /**
     * 300 Multiple Choices
     */
    static readonly MULTIPLE_CHOICES: HttpResponseStatus;
    /**
     * 301 Moved Permanently
     */
    static readonly MOVED_PERMANENTLY: HttpResponseStatus;
    /**
     * 302 Found
     */
    static readonly FOUND: HttpResponseStatus;
    /**
     * 303 See Other (since HTTP/1.1)
     */
    static readonly SEE_OTHER: HttpResponseStatus;
    /**
     * 304 Not Modified
     */
    static readonly NOT_MODIFIED: HttpResponseStatus;
    /**
     * 305 Use Proxy (since HTTP/1.1)
     */
    static readonly USE_PROXY: HttpResponseStatus;
    /**
     * 307 Temporary Redirect (since HTTP/1.1)
     */
    static readonly TEMPORARY_REDIRECT: HttpResponseStatus;
    /**
     * 308 Permanent Redirect (RFC7538)
     */
    static readonly PERMANENT_REDIRECT: HttpResponseStatus;
    /**
     * 400 Bad Request
     */
    static readonly BAD_REQUEST: HttpResponseStatus;
    /**
     * 401 Unauthorized
     */
    static readonly UNAUTHORIZED: HttpResponseStatus;
    /**
     * 402 Payment Required
     */
    static readonly PAYMENT_REQUIRED: HttpResponseStatus;
    /**
     * 403 Forbidden
     */
    static readonly FORBIDDEN: HttpResponseStatus;
    /**
     * 404 Not Found
     */
    static readonly NOT_FOUND: HttpResponseStatus;
    /**
     * 405 Method Not Allowed
     */
    static readonly METHOD_NOT_ALLOWED: HttpResponseStatus;
    /**
     * 406 Not Acceptable
     */
    static readonly NOT_ACCEPTABLE: HttpResponseStatus;
    /**
     * 407 Proxy Authentication Required
     */
    static readonly PROXY_AUTHENTICATION_REQUIRED: HttpResponseStatus;
    /**
     * 408 Request Timeout
     */
    static readonly REQUEST_TIMEOUT: HttpResponseStatus;
    /**
     * 409 Conflict
     */
    static readonly CONFLICT: HttpResponseStatus;
    /**
     * 410 Gone
     */
    static readonly GONE: HttpResponseStatus;
    /**
     * 411 Length Required
     */
    static readonly LENGTH_REQUIRED: HttpResponseStatus;
    /**
     * 412 Precondition Failed
     */
    static readonly PRECONDITION_FAILED: HttpResponseStatus;
    /**
     * 413 Request Entity Too Large
     */
    static readonly REQUEST_ENTITY_TOO_LARGE: HttpResponseStatus;
    /**
     * 414 Request-URI Too Long
     */
    static readonly REQUEST_URI_TOO_LONG: HttpResponseStatus;
    /**
     * 415 Unsupported Media Type
     */
    static readonly UNSUPPORTED_MEDIA_TYPE: HttpResponseStatus;
    /**
     * 416 Requested Range Not Satisfiable
     */
    static readonly REQUESTED_RANGE_NOT_SATISFIABLE: HttpResponseStatus;
    /**
     * 417 Expectation Failed
     */
    static readonly EXPECTATION_FAILED: HttpResponseStatus;
    /**
     * 421 Misdirected Request
     *
     * @see <a href="https://tools.ietf.org/html/rfc7540#section-9.1.2">421 (Misdirected Request) Status Code</a>
     */
    static readonly MISDIRECTED_REQUEST: HttpResponseStatus;
    /**
     * 422 Unprocessable Entity (WebDAV, RFC4918)
     */
    static readonly UNPROCESSABLE_ENTITY: HttpResponseStatus;
    /**
     * 423 Locked (WebDAV, RFC4918)
     */
    static readonly LOCKED: HttpResponseStatus;
    /**
     * 424 Failed Dependency (WebDAV, RFC4918)
     */
    static readonly FAILED_DEPENDENCY: HttpResponseStatus;
    /**
     * 425 Unordered Collection (WebDAV, RFC3648)
     */
    static readonly UNORDERED_COLLECTION: HttpResponseStatus;
    /**
     * 426 Upgrade Required (RFC2817)
     */
    static readonly UPGRADE_REQUIRED: HttpResponseStatus;
    /**
     * 428 Precondition Required (RFC6585)
     */
    static readonly PRECONDITION_REQUIRED: HttpResponseStatus;
    /**
     * 429 Too Many Requests (RFC6585)
     */
    static readonly TOO_MANY_REQUESTS: HttpResponseStatus;
    /**
     * 431 Request Header Fields Too Large (RFC6585)
     */
    static readonly REQUEST_HEADER_FIELDS_TOO_LARGE: HttpResponseStatus;
    /**
     * 500 Internal Server Error
     */
    static readonly INTERNAL_SERVER_ERROR: HttpResponseStatus;
    /**
     * 501 Not Implemented
     */
    static readonly NOT_IMPLEMENTED: HttpResponseStatus;
    /**
     * 502 Bad Gateway
     */
    static readonly BAD_GATEWAY: HttpResponseStatus;
    /**
     * 503 Service Unavailable
     */
    static readonly SERVICE_UNAVAILABLE: HttpResponseStatus;
    /**
     * 504 Gateway Timeout
     */
    static readonly GATEWAY_TIMEOUT: HttpResponseStatus;
    /**
     * 505 HTTP Version Not Supported
     */
    static readonly HTTP_VERSION_NOT_SUPPORTED: HttpResponseStatus;
    /**
     * 506 Variant Also Negotiates (RFC2295)
     */
    static readonly VARIANT_ALSO_NEGOTIATES: HttpResponseStatus;
    /**
     * 507 Insufficient Storage (WebDAV, RFC4918)
     */
    static readonly INSUFFICIENT_STORAGE: HttpResponseStatus;
    /**
     * 510 Not Extended (RFC2774)
     */
    static readonly NOT_EXTENDED: HttpResponseStatus;
    /**
     * 511 Network Authentication Required (RFC6585)
     */
    static readonly NETWORK_AUTHENTICATION_REQUIRED: HttpResponseStatus;
    private constructor();
}
export declare const fromJvmHttpResponseStatus: (jvmStatus: io.netty.handler.codec.http.HttpResponseStatus) => HttpResponseStatus;
