"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fromJvmHttpResponseStatus = exports.HttpResponseStatus = void 0;
class HttpResponseStatus {
    constructor(code, reasonPhrase) {
        this.code = code;
        this.reasonPhrase = reasonPhrase;
        // Do nothing.
    }
}
exports.HttpResponseStatus = HttpResponseStatus;
/**
 * 100 Continue
 */
HttpResponseStatus.CONTINUE = new HttpResponseStatus(100, "Continue");
/**
 * 101 Switching Protocols
 */
HttpResponseStatus.SWITCHING_PROTOCOLS = new HttpResponseStatus(101, "Switching Protocols");
/**
 * 102 Processing (WebDAV, RFC2518)
 */
HttpResponseStatus.PROCESSING = new HttpResponseStatus(102, "Processing");
/**
 * 103 Early Hints (RFC 8297)
 */
HttpResponseStatus.EARLY_HINTS = new HttpResponseStatus(103, "Early Hints");
/**
 * 200 OK
 */
HttpResponseStatus.OK = new HttpResponseStatus(200, "OK");
/**
 * 201 Created
 */
HttpResponseStatus.CREATED = new HttpResponseStatus(201, "Created");
/**
 * 202 Accepted
 */
HttpResponseStatus.ACCEPTED = new HttpResponseStatus(202, "Accepted");
/**
 * 203 Non-Authoritative Information (since HTTP/1.1)
 */
HttpResponseStatus.NON_AUTHORITATIVE_INFORMATION = new HttpResponseStatus(203, "Non-Authoritative Information");
/**
 * 204 No Content
 */
HttpResponseStatus.NO_CONTENT = new HttpResponseStatus(204, "No Content");
/**
 * 205 Reset Content
 */
HttpResponseStatus.RESET_CONTENT = new HttpResponseStatus(205, "Reset Content");
/**
 * 206 Partial Content
 */
HttpResponseStatus.PARTIAL_CONTENT = new HttpResponseStatus(206, "Partial Content");
/**
 * 207 Multi-Status (WebDAV, RFC2518)
 */
HttpResponseStatus.MULTI_STATUS = new HttpResponseStatus(207, "Multi-Status");
/**
 * 300 Multiple Choices
 */
HttpResponseStatus.MULTIPLE_CHOICES = new HttpResponseStatus(300, "Multiple Choices");
/**
 * 301 Moved Permanently
 */
HttpResponseStatus.MOVED_PERMANENTLY = new HttpResponseStatus(301, "Moved Permanently");
/**
 * 302 Found
 */
HttpResponseStatus.FOUND = new HttpResponseStatus(302, "Found");
/**
 * 303 See Other (since HTTP/1.1)
 */
HttpResponseStatus.SEE_OTHER = new HttpResponseStatus(303, "See Other");
/**
 * 304 Not Modified
 */
HttpResponseStatus.NOT_MODIFIED = new HttpResponseStatus(304, "Not Modified");
/**
 * 305 Use Proxy (since HTTP/1.1)
 */
HttpResponseStatus.USE_PROXY = new HttpResponseStatus(305, "Use Proxy");
/**
 * 307 Temporary Redirect (since HTTP/1.1)
 */
HttpResponseStatus.TEMPORARY_REDIRECT = new HttpResponseStatus(307, "Temporary Redirect");
/**
 * 308 Permanent Redirect (RFC7538)
 */
HttpResponseStatus.PERMANENT_REDIRECT = new HttpResponseStatus(308, "Permanent Redirect");
/**
 * 400 Bad Request
 */
HttpResponseStatus.BAD_REQUEST = new HttpResponseStatus(400, "Bad Request");
/**
 * 401 Unauthorized
 */
HttpResponseStatus.UNAUTHORIZED = new HttpResponseStatus(401, "Unauthorized");
/**
 * 402 Payment Required
 */
HttpResponseStatus.PAYMENT_REQUIRED = new HttpResponseStatus(402, "Payment Required");
/**
 * 403 Forbidden
 */
HttpResponseStatus.FORBIDDEN = new HttpResponseStatus(403, "Forbidden");
/**
 * 404 Not Found
 */
HttpResponseStatus.NOT_FOUND = new HttpResponseStatus(404, "Not Found");
/**
 * 405 Method Not Allowed
 */
HttpResponseStatus.METHOD_NOT_ALLOWED = new HttpResponseStatus(405, "Method Not Allowed");
/**
 * 406 Not Acceptable
 */
HttpResponseStatus.NOT_ACCEPTABLE = new HttpResponseStatus(406, "Not Acceptable");
/**
 * 407 Proxy Authentication Required
 */
HttpResponseStatus.PROXY_AUTHENTICATION_REQUIRED = new HttpResponseStatus(407, "Proxy Authentication Required");
/**
 * 408 Request Timeout
 */
HttpResponseStatus.REQUEST_TIMEOUT = new HttpResponseStatus(408, "Request Timeout");
/**
 * 409 Conflict
 */
HttpResponseStatus.CONFLICT = new HttpResponseStatus(409, "Conflict");
/**
 * 410 Gone
 */
HttpResponseStatus.GONE = new HttpResponseStatus(410, "Gone");
/**
 * 411 Length Required
 */
HttpResponseStatus.LENGTH_REQUIRED = new HttpResponseStatus(411, "Length Required");
/**
 * 412 Precondition Failed
 */
HttpResponseStatus.PRECONDITION_FAILED = new HttpResponseStatus(412, "Precondition Failed");
/**
 * 413 Request Entity Too Large
 */
HttpResponseStatus.REQUEST_ENTITY_TOO_LARGE = new HttpResponseStatus(413, "Request Entity Too Large");
/**
 * 414 Request-URI Too Long
 */
HttpResponseStatus.REQUEST_URI_TOO_LONG = new HttpResponseStatus(414, "Request-URI Too Long");
/**
 * 415 Unsupported Media Type
 */
HttpResponseStatus.UNSUPPORTED_MEDIA_TYPE = new HttpResponseStatus(415, "Unsupported Media Type");
/**
 * 416 Requested Range Not Satisfiable
 */
HttpResponseStatus.REQUESTED_RANGE_NOT_SATISFIABLE = new HttpResponseStatus(416, "Requested Range Not Satisfiable");
/**
 * 417 Expectation Failed
 */
HttpResponseStatus.EXPECTATION_FAILED = new HttpResponseStatus(417, "Expectation Failed");
/**
 * 421 Misdirected Request
 *
 * @see <a href="https://tools.ietf.org/html/rfc7540#section-9.1.2">421 (Misdirected Request) Status Code</a>
 */
HttpResponseStatus.MISDIRECTED_REQUEST = new HttpResponseStatus(421, "Misdirected Request");
/**
 * 422 Unprocessable Entity (WebDAV, RFC4918)
 */
HttpResponseStatus.UNPROCESSABLE_ENTITY = new HttpResponseStatus(422, "Unprocessable Entity");
/**
 * 423 Locked (WebDAV, RFC4918)
 */
HttpResponseStatus.LOCKED = new HttpResponseStatus(423, "Locked");
/**
 * 424 Failed Dependency (WebDAV, RFC4918)
 */
HttpResponseStatus.FAILED_DEPENDENCY = new HttpResponseStatus(424, "Failed Dependency");
/**
 * 425 Unordered Collection (WebDAV, RFC3648)
 */
HttpResponseStatus.UNORDERED_COLLECTION = new HttpResponseStatus(425, "Unordered Collection");
/**
 * 426 Upgrade Required (RFC2817)
 */
HttpResponseStatus.UPGRADE_REQUIRED = new HttpResponseStatus(426, "Upgrade Required");
/**
 * 428 Precondition Required (RFC6585)
 */
HttpResponseStatus.PRECONDITION_REQUIRED = new HttpResponseStatus(428, "Precondition Required");
/**
 * 429 Too Many Requests (RFC6585)
 */
HttpResponseStatus.TOO_MANY_REQUESTS = new HttpResponseStatus(429, "Too Many Requests");
/**
 * 431 Request Header Fields Too Large (RFC6585)
 */
HttpResponseStatus.REQUEST_HEADER_FIELDS_TOO_LARGE = new HttpResponseStatus(431, "Request Header Fields Too Large");
/**
 * 500 Internal Server Error
 */
HttpResponseStatus.INTERNAL_SERVER_ERROR = new HttpResponseStatus(500, "Internal Server Error");
/**
 * 501 Not Implemented
 */
HttpResponseStatus.NOT_IMPLEMENTED = new HttpResponseStatus(501, "Not Implemented");
/**
 * 502 Bad Gateway
 */
HttpResponseStatus.BAD_GATEWAY = new HttpResponseStatus(502, "Bad Gateway");
/**
 * 503 Service Unavailable
 */
HttpResponseStatus.SERVICE_UNAVAILABLE = new HttpResponseStatus(503, "Service Unavailable");
/**
 * 504 Gateway Timeout
 */
HttpResponseStatus.GATEWAY_TIMEOUT = new HttpResponseStatus(504, "Gateway Timeout");
/**
 * 505 HTTP Version Not Supported
 */
HttpResponseStatus.HTTP_VERSION_NOT_SUPPORTED = new HttpResponseStatus(505, "HTTP Version Not Supported");
/**
 * 506 Variant Also Negotiates (RFC2295)
 */
HttpResponseStatus.VARIANT_ALSO_NEGOTIATES = new HttpResponseStatus(506, "Variant Also Negotiates");
/**
 * 507 Insufficient Storage (WebDAV, RFC4918)
 */
HttpResponseStatus.INSUFFICIENT_STORAGE = new HttpResponseStatus(507, "Insufficient Storage");
/**
 * 510 Not Extended (RFC2774)
 */
HttpResponseStatus.NOT_EXTENDED = new HttpResponseStatus(510, "Not Extended");
/**
 * 511 Network Authentication Required (RFC6585)
 */
HttpResponseStatus.NETWORK_AUTHENTICATION_REQUIRED = new HttpResponseStatus(511, "Network Authentication Required");
const fromJvmHttpResponseStatus = (jvmStatus) => {
    switch (jvmStatus.code()) {
        case 100:
            return HttpResponseStatus.CONTINUE;
        case 101:
            return HttpResponseStatus.SWITCHING_PROTOCOLS;
        case 102:
            return HttpResponseStatus.PROCESSING;
        case 103:
            return HttpResponseStatus.EARLY_HINTS;
        case 200:
            return HttpResponseStatus.OK;
        case 201:
            return HttpResponseStatus.CREATED;
        case 202:
            return HttpResponseStatus.ACCEPTED;
        case 203:
            return HttpResponseStatus.NON_AUTHORITATIVE_INFORMATION;
        case 204:
            return HttpResponseStatus.NO_CONTENT;
        case 205:
            return HttpResponseStatus.RESET_CONTENT;
        case 206:
            return HttpResponseStatus.PARTIAL_CONTENT;
        case 207:
            return HttpResponseStatus.MULTI_STATUS;
        case 300:
            return HttpResponseStatus.MULTIPLE_CHOICES;
        case 301:
            return HttpResponseStatus.MOVED_PERMANENTLY;
        case 302:
            return HttpResponseStatus.FOUND;
        case 303:
            return HttpResponseStatus.SEE_OTHER;
        case 304:
            return HttpResponseStatus.NOT_MODIFIED;
        case 305:
            return HttpResponseStatus.USE_PROXY;
        case 307:
            return HttpResponseStatus.TEMPORARY_REDIRECT;
        case 308:
            return HttpResponseStatus.PERMANENT_REDIRECT;
        case 400:
            return HttpResponseStatus.BAD_REQUEST;
        case 401:
            return HttpResponseStatus.UNAUTHORIZED;
        case 402:
            return HttpResponseStatus.PAYMENT_REQUIRED;
        case 403:
            return HttpResponseStatus.FORBIDDEN;
        case 404:
            return HttpResponseStatus.NOT_FOUND;
        case 405:
            return HttpResponseStatus.METHOD_NOT_ALLOWED;
        case 406:
            return HttpResponseStatus.NOT_ACCEPTABLE;
        case 407:
            return HttpResponseStatus.PROXY_AUTHENTICATION_REQUIRED;
        case 408:
            return HttpResponseStatus.REQUEST_TIMEOUT;
        case 409:
            return HttpResponseStatus.CONFLICT;
        case 410:
            return HttpResponseStatus.GONE;
        case 411:
            return HttpResponseStatus.LENGTH_REQUIRED;
        case 412:
            return HttpResponseStatus.PRECONDITION_FAILED;
        case 413:
            return HttpResponseStatus.REQUEST_ENTITY_TOO_LARGE;
        case 414:
            return HttpResponseStatus.REQUEST_URI_TOO_LONG;
        case 415:
            return HttpResponseStatus.UNSUPPORTED_MEDIA_TYPE;
        case 416:
            return HttpResponseStatus.REQUESTED_RANGE_NOT_SATISFIABLE;
        case 417:
            return HttpResponseStatus.EXPECTATION_FAILED;
        case 421:
            return HttpResponseStatus.MISDIRECTED_REQUEST;
        case 422:
            return HttpResponseStatus.UNPROCESSABLE_ENTITY;
        case 423:
            return HttpResponseStatus.LOCKED;
        case 424:
            return HttpResponseStatus.FAILED_DEPENDENCY;
        case 425:
            return HttpResponseStatus.UNORDERED_COLLECTION;
        case 426:
            return HttpResponseStatus.UPGRADE_REQUIRED;
        case 428:
            return HttpResponseStatus.PRECONDITION_REQUIRED;
        case 429:
            return HttpResponseStatus.TOO_MANY_REQUESTS;
        case 431:
            return HttpResponseStatus.REQUEST_HEADER_FIELDS_TOO_LARGE;
        case 500:
            return HttpResponseStatus.INTERNAL_SERVER_ERROR;
        case 501:
            return HttpResponseStatus.NOT_IMPLEMENTED;
        case 502:
            return HttpResponseStatus.BAD_GATEWAY;
        case 503:
            return HttpResponseStatus.SERVICE_UNAVAILABLE;
        case 504:
            return HttpResponseStatus.GATEWAY_TIMEOUT;
        case 505:
            return HttpResponseStatus.HTTP_VERSION_NOT_SUPPORTED;
        case 506:
            return HttpResponseStatus.VARIANT_ALSO_NEGOTIATES;
        case 507:
            return HttpResponseStatus.INSUFFICIENT_STORAGE;
        case 510:
            return HttpResponseStatus.NOT_EXTENDED;
        case 511:
            return HttpResponseStatus.NETWORK_AUTHENTICATION_REQUIRED;
    }
    throw Error("This shouldn't happen unless we lag behind the original implementation, call support if this ever happens.");
};
exports.fromJvmHttpResponseStatus = fromJvmHttpResponseStatus;
