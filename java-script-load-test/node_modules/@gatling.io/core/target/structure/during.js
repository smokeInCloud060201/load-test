"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.duringImpl = void 0;
const duration_1 = require("../utils/duration");
const session_1 = require("../session");
const on_1 = require("./on");
const duringImpl = (jvmDuring, wrap) => (duration, arg1, arg2) => {
    if (arg2 !== undefined && typeof arg1 === "string") {
        // during(duration, counterName, exitASAP)
        if ((0, duration_1.isDuration)(duration)) {
            return (0, on_1.wrapOn)(jvmDuring.during((0, duration_1.toJvmDuration)(duration), arg1, arg2), wrap);
        }
        else if (typeof duration === "function") {
            return (0, on_1.wrapOn)(jvmDuring.during((0, session_1.underlyingSessionToDuration)(duration), arg1, arg2), wrap);
        }
        else {
            return (0, on_1.wrapOn)(jvmDuring.during(duration, arg1, arg2), wrap);
        }
    }
    else if (typeof arg1 === "string") {
        // during(duration, counterName)
        if ((0, duration_1.isDuration)(duration)) {
            return (0, on_1.wrapOn)(jvmDuring.during((0, duration_1.toJvmDuration)(duration), arg1), wrap);
        }
        else if (typeof duration === "function") {
            return (0, on_1.wrapOn)(jvmDuring.during((0, session_1.underlyingSessionToDuration)(duration), arg1), wrap);
        }
        else {
            return (0, on_1.wrapOn)(jvmDuring.during(duration, arg1), wrap);
        }
    }
    else if (typeof arg1 === "boolean") {
        // during(duration, exitASAP)
        if ((0, duration_1.isDuration)(duration)) {
            return (0, on_1.wrapOn)(jvmDuring.during((0, duration_1.toJvmDuration)(duration), arg1), wrap);
        }
        else if (typeof duration === "function") {
            return (0, on_1.wrapOn)(jvmDuring.during((0, session_1.underlyingSessionToDuration)(duration), arg1), wrap);
        }
        else {
            return (0, on_1.wrapOn)(jvmDuring.during(duration, arg1), wrap);
        }
    }
    else if (arg1 === undefined) {
        // during(duration)
        if ((0, duration_1.isDuration)(duration)) {
            return (0, on_1.wrapOn)(jvmDuring.during((0, duration_1.toJvmDuration)(duration)), wrap);
        }
        else if (typeof duration === "function") {
            return (0, on_1.wrapOn)(jvmDuring.during((0, session_1.underlyingSessionToDuration)(duration)), wrap);
        }
        else {
            return (0, on_1.wrapOn)(jvmDuring.during(duration), wrap);
        }
    }
    throw Error(`during() called with invalid arguments ${duration}, ${arg1}, ${arg2}`);
};
exports.duringImpl = duringImpl;
