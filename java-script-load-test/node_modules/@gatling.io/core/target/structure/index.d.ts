import JvmChainBuilder = io.gatling.javaapi.core.ChainBuilder;
import { JvmStructureBuilderLike } from "./jvmStructureBuilder";
import { ExecFunction, Execs, Executable } from "./execs";
import { GroupFunction, Groups } from "./groups";
import { FeedFunction, Feeds } from "./feeds";
import { PauseFunction, Pauses } from "./pauses";
import { Paces } from "./paces";
import { RendezVous } from "./rendezVous";
import { Repeat } from "./repeat";
import { ForEach } from "./forEach";
import { During } from "./during";
import { Forever } from "./forever";
import { AsLongAs } from "./asLongAs";
import { DoWhile } from "./doWhile";
import { AsLongAsDuring } from "./asLongAsDuring";
import { DoWhileDuring } from "./doWhileDuring";
import { DoIf, DoIfEquals } from "./doIf";
import { DoIfOrElse, DoIfEqualsOrElse } from "./doIfOrElse";
import { DoSwitch } from "./doSwitch";
import { DoSwitchOrElse } from "./doSwitchOrElse";
import { RandomSwitch } from "./randomSwitch";
import { RandomSwitchOrElse } from "./randomSwitchOrElse";
import { UniformRandomSwitch } from "./uniformRandomSwitch";
import { RoundRobinSwitch } from "./roundRobinSwitch";
import { Errors } from "./errors";
export interface StructureBuilder<T extends StructureBuilder<T>> extends Execs<T>, Groups<T>, Feeds<T>, Pauses<T>, Paces<T>, RendezVous<T>, Repeat<T>, ForEach<T>, During<T>, Forever<T>, AsLongAs<T>, DoWhile<T>, AsLongAsDuring<T>, DoWhileDuring<T>, DoIf<T>, DoIfOrElse<T>, DoIfEquals<T>, DoIfEqualsOrElse<T>, DoSwitch<T>, DoSwitchOrElse<T>, RandomSwitch<T>, RandomSwitchOrElse<T>, UniformRandomSwitch<T>, RoundRobinSwitch<T>, Errors<T> {
}
export declare const structureBuilderImpl: <J2, J1 extends JvmStructureBuilderLike<J2, any>, T extends StructureBuilder<T>>(jvm: J1, wrap: (wrapped: J2) => T) => StructureBuilder<T>;
export interface ChainBuilder extends StructureBuilder<ChainBuilder>, Executable<JvmChainBuilder> {
}
export { ActionBuilder, wrapActionBuilder } from "./execs";
export { onCase, percent } from "./choices";
export declare const exec: ExecFunction<ChainBuilder>;
export declare const group: GroupFunction<ChainBuilder>;
export declare const feed: FeedFunction<ChainBuilder>;
export declare const pause: PauseFunction<ChainBuilder>;
export declare const pace: import("./paces").PaceFunction<ChainBuilder>;
export declare const rendezVous: import("./rendezVous").RendezVousFunction<ChainBuilder>;
export declare const repeat: import("./repeat").RepeatFunction<ChainBuilder>;
export declare const foreach: import("./forEach").ForEachFunction<ChainBuilder>;
export declare const during: import("./during").DuringFunction<ChainBuilder>;
export declare const forever: import("./forever").ForeverFunction<ChainBuilder>;
export declare const asLongAs: import("./asLongAs").AsLongAsFunction<ChainBuilder>;
export declare const doWhile: import("./doWhile").DoWhileFunction<ChainBuilder>;
export declare const asLongAsDuring: import("./asLongAsDuring").AsLongAsDuringFunction<ChainBuilder>;
export declare const doWhileDuring: import("./doWhileDuring").DoWhileDuringFunction<ChainBuilder>;
export declare const doIf: import("./doIf").DoIfFunction<ChainBuilder>;
export declare const doIfOrElse: import("./doIfOrElse").DoIfOrElseFunction<ChainBuilder>;
export declare const doIfEquals: import("./doIf").DoIfEqualsFunction<ChainBuilder>;
export declare const doIfEqualsOrElse: import("./doIfOrElse").DoIfEqualsOrElseFunction<ChainBuilder>;
export declare const doSwitch: import("./doSwitch").DoSwitchFunction<ChainBuilder>;
export declare const doSwitchOrElse: import("./doSwitchOrElse").DoSwitchOrElseFunction<ChainBuilder>;
export declare const randomSwitch: import("./randomSwitch").RandomSwitchFunction<ChainBuilder>;
export declare const randomSwitchOrElse: import("./randomSwitchOrElse").RandomSwitchOrElseFunction<ChainBuilder>;
export declare const uniformRandomSwitch: import("./uniformRandomSwitch").UniformRandomSwitchFunction<ChainBuilder>;
export declare const roundRobinSwitch: import("./roundRobinSwitch").RoundRobinSwitchFunction<ChainBuilder>;
export declare const exitBlockOnFail: import("./errors").ExitBlockOnFailFunction<ChainBuilder>;
export declare const tryMax: import("./errors").TryMaxFunction<ChainBuilder>;
export declare const exitHereIf: import("./errors").ExitHereIfFunction<ChainBuilder>;
export declare const exitHere: import("./errors").ExitHereFunction<ChainBuilder>;
export declare const exitHereIfFailed: import("./errors").ExitHereIfFailedFunction<ChainBuilder>;
export declare const stopLoadGenerator: import("./errors").StopLoadGeneratorFunction<ChainBuilder>;
export declare const stopLoadGeneratorIf: import("./errors").StopLoadGeneratorIfFunction<ChainBuilder>;
export declare const crashLoadGenerator: import("./errors").CrashLoadGeneratorFunction<ChainBuilder>;
export declare const crashLoadGeneratorIf: import("./errors").CrashLoadGeneratorIfFunction<ChainBuilder>;
