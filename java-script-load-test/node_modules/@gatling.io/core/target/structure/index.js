"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.crashLoadGeneratorIf = exports.crashLoadGenerator = exports.stopLoadGeneratorIf = exports.stopLoadGenerator = exports.exitHereIfFailed = exports.exitHere = exports.exitHereIf = exports.tryMax = exports.exitBlockOnFail = exports.roundRobinSwitch = exports.uniformRandomSwitch = exports.randomSwitchOrElse = exports.randomSwitch = exports.doSwitchOrElse = exports.doSwitch = exports.doIfEqualsOrElse = exports.doIfEquals = exports.doIfOrElse = exports.doIf = exports.doWhileDuring = exports.asLongAsDuring = exports.doWhile = exports.asLongAs = exports.forever = exports.during = exports.foreach = exports.repeat = exports.rendezVous = exports.pace = exports.pause = exports.feed = exports.group = exports.exec = exports.percent = exports.onCase = exports.wrapActionBuilder = exports.structureBuilderImpl = void 0;
const jvm_types_1 = require("@gatling.io/jvm-types");
const execs_1 = require("./execs");
const groups_1 = require("./groups");
const feeds_1 = require("./feeds");
const pauses_1 = require("./pauses");
const paces_1 = require("./paces");
const rendezVous_1 = require("./rendezVous");
const repeat_1 = require("./repeat");
const forEach_1 = require("./forEach");
const during_1 = require("./during");
const forever_1 = require("./forever");
const asLongAs_1 = require("./asLongAs");
const doWhile_1 = require("./doWhile");
const asLongAsDuring_1 = require("./asLongAsDuring");
const doWhileDuring_1 = require("./doWhileDuring");
const doIf_1 = require("./doIf");
const doIfOrElse_1 = require("./doIfOrElse");
const doSwitch_1 = require("./doSwitch");
const doSwitchOrElse_1 = require("./doSwitchOrElse");
const randomSwitch_1 = require("./randomSwitch");
const randomSwitchOrElse_1 = require("./randomSwitchOrElse");
const uniformRandomSwitch_1 = require("./uniformRandomSwitch");
const roundRobinSwitch_1 = require("./roundRobinSwitch");
const errors_1 = require("./errors");
const structureBuilderImpl = (jvm, wrap) => ({
    exec: (0, execs_1.execImpl)(jvm, wrap),
    group: (0, groups_1.groupImpl)(jvm, wrap),
    feed: (0, feeds_1.feedImpl)(jvm, wrap),
    pause: (0, pauses_1.pauseImpl)(jvm, wrap),
    pace: (0, paces_1.paceImpl)(jvm, wrap),
    rendezVous: (0, rendezVous_1.rendezVousImpl)(jvm, wrap),
    repeat: (0, repeat_1.repeatImpl)(jvm, wrap),
    foreach: (0, forEach_1.foreachImpl)(jvm, wrap),
    during: (0, during_1.duringImpl)(jvm, wrap),
    forever: (0, forever_1.foreverImpl)(jvm, wrap),
    asLongAs: (0, asLongAs_1.asLongAsImpl)(jvm, wrap),
    doWhile: (0, doWhile_1.doWhileImpl)(jvm, wrap),
    asLongAsDuring: (0, asLongAsDuring_1.asLongAsDuringImpl)(jvm, wrap),
    doWhileDuring: (0, doWhileDuring_1.doWhileDuringImpl)(jvm, wrap),
    doIf: (0, doIf_1.doIfImpl)(jvm, wrap),
    doIfOrElse: (0, doIfOrElse_1.doIfOrElseImpl)(jvm, wrap),
    doIfEquals: (0, doIf_1.doIfEqualsImpl)(jvm, wrap),
    doIfEqualsOrElse: (0, doIfOrElse_1.doIfEqualsOrElseImpl)(jvm, wrap),
    doSwitch: (0, doSwitch_1.doSwitchImpl)(jvm, wrap),
    doSwitchOrElse: (0, doSwitchOrElse_1.doSwitchOrElseImpl)(jvm, wrap),
    randomSwitch: (0, randomSwitch_1.randomSwitchImpl)(jvm, wrap),
    randomSwitchOrElse: (0, randomSwitchOrElse_1.randomSwitchOrElseImpl)(jvm, wrap),
    uniformRandomSwitch: (0, uniformRandomSwitch_1.uniformRandomSwitchImpl)(jvm, wrap),
    roundRobinSwitch: (0, roundRobinSwitch_1.roundRobinSwitchImpl)(jvm, wrap),
    ...(0, errors_1.errorsImpl)(jvm, wrap)
});
exports.structureBuilderImpl = structureBuilderImpl;
const wrapChainBuilder = (_underlying) => ({
    _underlying,
    ...(0, exports.structureBuilderImpl)(_underlying, wrapChainBuilder)
});
// CoreDsl elements
var execs_2 = require("./execs");
Object.defineProperty(exports, "wrapActionBuilder", { enumerable: true, get: function () { return execs_2.wrapActionBuilder; } });
var choices_1 = require("./choices");
Object.defineProperty(exports, "onCase", { enumerable: true, get: function () { return choices_1.onCase; } });
Object.defineProperty(exports, "percent", { enumerable: true, get: function () { return choices_1.percent; } });
exports.exec = (0, execs_1.execImpl)(jvm_types_1.CoreDsl, wrapChainBuilder);
exports.group = (0, groups_1.groupImpl)(jvm_types_1.CoreDsl, wrapChainBuilder);
exports.feed = (0, feeds_1.feedImpl)(jvm_types_1.CoreDsl, wrapChainBuilder);
exports.pause = (0, pauses_1.pauseImpl)(jvm_types_1.CoreDsl, wrapChainBuilder);
exports.pace = (0, paces_1.paceImpl)(jvm_types_1.CoreDsl, wrapChainBuilder);
exports.rendezVous = (0, rendezVous_1.rendezVousImpl)(jvm_types_1.CoreDsl, wrapChainBuilder);
exports.repeat = (0, repeat_1.repeatImpl)(jvm_types_1.CoreDsl, wrapChainBuilder);
exports.foreach = (0, forEach_1.foreachImpl)(jvm_types_1.CoreDsl, wrapChainBuilder);
exports.during = (0, during_1.duringImpl)(jvm_types_1.CoreDsl, wrapChainBuilder);
exports.forever = (0, forever_1.foreverImpl)(jvm_types_1.CoreDsl, wrapChainBuilder);
exports.asLongAs = (0, asLongAs_1.asLongAsImpl)(jvm_types_1.CoreDsl, wrapChainBuilder);
exports.doWhile = (0, doWhile_1.doWhileImpl)(jvm_types_1.CoreDsl, wrapChainBuilder);
exports.asLongAsDuring = (0, asLongAsDuring_1.asLongAsDuringImpl)(jvm_types_1.CoreDsl, wrapChainBuilder);
exports.doWhileDuring = (0, doWhileDuring_1.doWhileDuringImpl)(jvm_types_1.CoreDsl, wrapChainBuilder);
exports.doIf = (0, doIf_1.doIfImpl)(jvm_types_1.CoreDsl, wrapChainBuilder);
exports.doIfOrElse = (0, doIfOrElse_1.doIfOrElseImpl)(jvm_types_1.CoreDsl, wrapChainBuilder);
exports.doIfEquals = (0, doIf_1.doIfEqualsImpl)(jvm_types_1.CoreDsl, wrapChainBuilder);
exports.doIfEqualsOrElse = (0, doIfOrElse_1.doIfEqualsOrElseImpl)(jvm_types_1.CoreDsl, wrapChainBuilder);
exports.doSwitch = (0, doSwitch_1.doSwitchImpl)(jvm_types_1.CoreDsl, wrapChainBuilder);
exports.doSwitchOrElse = (0, doSwitchOrElse_1.doSwitchOrElseImpl)(jvm_types_1.CoreDsl, wrapChainBuilder);
exports.randomSwitch = (0, randomSwitch_1.randomSwitchImpl)(jvm_types_1.CoreDsl, wrapChainBuilder);
exports.randomSwitchOrElse = (0, randomSwitchOrElse_1.randomSwitchOrElseImpl)(jvm_types_1.CoreDsl, wrapChainBuilder);
exports.uniformRandomSwitch = (0, uniformRandomSwitch_1.uniformRandomSwitchImpl)(jvm_types_1.CoreDsl, wrapChainBuilder);
exports.roundRobinSwitch = (0, roundRobinSwitch_1.roundRobinSwitchImpl)(jvm_types_1.CoreDsl, wrapChainBuilder);
exports.exitBlockOnFail = (0, errors_1.errorsImpl)(jvm_types_1.CoreDsl, wrapChainBuilder).exitBlockOnFail;
exports.tryMax = (0, errors_1.errorsImpl)(jvm_types_1.CoreDsl, wrapChainBuilder).tryMax;
exports.exitHereIf = (0, errors_1.errorsImpl)(jvm_types_1.CoreDsl, wrapChainBuilder).exitHereIf;
exports.exitHere = (0, errors_1.errorsImpl)(jvm_types_1.CoreDsl, wrapChainBuilder).exitHere;
exports.exitHereIfFailed = (0, errors_1.errorsImpl)(jvm_types_1.CoreDsl, wrapChainBuilder).exitHereIfFailed;
exports.stopLoadGenerator = (0, errors_1.errorsImpl)(jvm_types_1.CoreDsl, wrapChainBuilder).stopLoadGenerator;
exports.stopLoadGeneratorIf = (0, errors_1.errorsImpl)(jvm_types_1.CoreDsl, wrapChainBuilder).stopLoadGeneratorIf;
exports.crashLoadGenerator = (0, errors_1.errorsImpl)(jvm_types_1.CoreDsl, wrapChainBuilder).crashLoadGenerator;
exports.crashLoadGeneratorIf = (0, errors_1.errorsImpl)(jvm_types_1.CoreDsl, wrapChainBuilder).crashLoadGeneratorIf;
