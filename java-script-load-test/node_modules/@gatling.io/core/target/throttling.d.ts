import { Duration } from "./utils/duration";
import { Wrapper } from "./common";
import JvmThrottleStep = io.gatling.javaapi.core.ThrottleStep;
/**
 * Bootstrap a new reachRps throttling profile, see {@link ThrottleStepReachIntermediate}
 *
 * @param target - the target requests per second
 * @returns the next DSL step
 */
export declare const reachRps: (target: number) => ThrottleStepReachIntermediate;
/**
 * Bootstrap a new holdFor throttling profile that limits rps to its current value
 *
 * @param duration - the duration of the plateau in seconds
 * @returns the next DSL step
 */
export declare const holdFor: (duration: Duration) => ThrottleStep;
/**
 * Bootstrap a new jumpToRps throttling profile that change the rps limit to a new value
 *
 * @param target - the new limit
 * @returns the next DSL step
 */
export declare const jumpToRps: (target: number) => ThrottleStep;
export interface ThrottleStep extends Wrapper<JvmThrottleStep> {
}
/**
 * DSL step to define the duration of a throttling ramp.
 */
export interface ThrottleStepReachIntermediate {
    /**
     * Define the duration of a throttling ramp
     *
     * @param duration - the duration
     * @returns a new ThrottleStep
     */
    in(duration: Duration): ThrottleStep;
    /**
     * Alias for `in` that's a reserved keyword in Kotlin
     *
     * @param duration - the duration
     * @returns a new ThrottleStep
     */
    during(duration: Duration): ThrottleStep;
}
