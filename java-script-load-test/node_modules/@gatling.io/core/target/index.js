"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.simulation = exports.getEnvironmentVariable = exports.getOption = exports.getParameter = exports.GlobalStore = exports.readResourceAsString = exports.readResourceAsBytes = exports.asByteArrayFunction = exports.asByteArray = exports.asJava = void 0;
require("@gatling.io/jvm-types");
const pauses_1 = require("./structure/pauses");
const duration_1 = require("./utils/duration");
const session_1 = require("./session");
// FIXME no export *
var collections_1 = require("./gatlingJvm/collections");
Object.defineProperty(exports, "asJava", { enumerable: true, get: function () { return collections_1.asJava; } });
var byteArrays_1 = require("./gatlingJvm/byteArrays");
Object.defineProperty(exports, "asByteArray", { enumerable: true, get: function () { return byteArrays_1.asByteArray; } });
Object.defineProperty(exports, "asByteArrayFunction", { enumerable: true, get: function () { return byteArrays_1.asByteArrayFunction; } });
var resources_1 = require("./gatlingJvm/resources");
Object.defineProperty(exports, "readResourceAsBytes", { enumerable: true, get: function () { return resources_1.readResourceAsBytes; } });
Object.defineProperty(exports, "readResourceAsString", { enumerable: true, get: function () { return resources_1.readResourceAsString; } });
__exportStar(require("./utils/duration"), exports);
__exportStar(require("./assertions"), exports);
__exportStar(require("./body"), exports);
__exportStar(require("./checks"), exports);
__exportStar(require("./closedInjection"), exports);
__exportStar(require("./common"), exports);
__exportStar(require("./feeders"), exports);
__exportStar(require("./filters"), exports);
var globalStore_1 = require("./globalStore");
Object.defineProperty(exports, "GlobalStore", { enumerable: true, get: function () { return globalStore_1.GlobalStore; } });
__exportStar(require("./openInjection"), exports);
__exportStar(require("./population"), exports);
var parameters_1 = require("./parameters");
Object.defineProperty(exports, "getParameter", { enumerable: true, get: function () { return parameters_1.getParameter; } });
Object.defineProperty(exports, "getOption", { enumerable: true, get: function () { return parameters_1.getOption; } });
Object.defineProperty(exports, "getEnvironmentVariable", { enumerable: true, get: function () { return parameters_1.getEnvironmentVariable; } });
__exportStar(require("./protocol"), exports);
__exportStar(require("./scenario"), exports);
__exportStar(require("./session"), exports);
__exportStar(require("./structure"), exports);
__exportStar(require("./throttling"), exports);
const wrapSetUp = (jvmSetUp) => ({
    protocols: (...protocols) => wrapSetUp(jvmSetUp.protocols(protocols.map((p) => p._underlying))),
    assertions: (...assertions) => wrapSetUp(jvmSetUp.assertions(assertions.map((p) => p._underlying))),
    maxDuration: (duration) => wrapSetUp(jvmSetUp.maxDuration((0, duration_1.toJvmDuration)(duration))),
    throttle: (...throttleSteps) => wrapSetUp(jvmSetUp.throttle(throttleSteps.map((t) => t._underlying))),
    disablePauses: () => wrapSetUp(jvmSetUp.disablePauses()),
    constantPauses: () => wrapSetUp(jvmSetUp.constantPauses()),
    exponentialPauses: () => wrapSetUp(jvmSetUp.exponentialPauses()),
    customPauses: (f) => wrapSetUp(jvmSetUp.customPauses((0, session_1.underlyingSessionTo)(f))),
    uniformPauses: (plusOrMinus) => wrapSetUp(jvmSetUp.uniformPauses((0, duration_1.toJvmDuration)(plusOrMinus))),
    normalPausesWithStdDevDuration: (stdDevDuration) => wrapSetUp(jvmSetUp.normalPausesWithStdDevDuration((0, duration_1.toJvmDuration)(stdDevDuration))),
    normalPausesWithPercentageDuration: (stdDevPercent) => wrapSetUp(jvmSetUp.normalPausesWithPercentageDuration(stdDevPercent)),
    pauses: (pauseType) => wrapSetUp(jvmSetUp.pauses((0, pauses_1.toJvmPauseType)(pauseType)))
});
const simulation = (simulation) => (jvmSetUp) => {
    simulation((...populationBuilders) => wrapSetUp(jvmSetUp(populationBuilders.map((p) => p._underlying))));
};
exports.simulation = simulation;
