"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.downloadFile = void 0;
const make_fetch_happen_1 = __importDefault(require("make-fetch-happen"));
const fs_1 = __importDefault(require("fs"));
const util_1 = __importDefault(require("util"));
const stream_1 = __importDefault(require("stream"));
const pipeline = util_1.default.promisify(stream_1.default.pipeline);
const NPM_CONFIG_PROXY_KEY = "npm_config_proxy";
const NPM_CONFIG_HTTPS_PROXY_KEY = "npm_config_https_proxy";
const NPM_CONFIG_NOPROXY_KEY = "npm_config_noproxy";
const fetchOptionsFromNpmConfiguration = () => {
    const proxy = process.env[NPM_CONFIG_HTTPS_PROXY_KEY] || process.env[NPM_CONFIG_PROXY_KEY] || undefined;
    const noProxy = process.env[NPM_CONFIG_NOPROXY_KEY] || undefined;
    return {
        proxy,
        noProxy
    };
};
const downloadFile = async (url, targetFile) => {
    const options = fetchOptionsFromNpmConfiguration();
    const response = await (0, make_fetch_happen_1.default)(url, options);
    if (!response.ok) {
        throw new Error(`Failed to fetch: ${response.status} ${response.statusText}`);
    }
    await pipeline(response.body, fs_1.default.createWriteStream(targetFile));
};
exports.downloadFile = downloadFile;
