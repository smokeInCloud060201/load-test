/// <reference path="gatling.d.ts" preserve="true" />
interface ActionBuilderStatic {
    readonly class: any;
}
export declare const ActionBuilder: ActionBuilderStatic;
interface AddCookieStatic {
    readonly class: any;
}
export declare const AddCookie: AddCookieStatic;
interface AsLongAs$OnStatic {
    readonly class: any;
}
export declare const AsLongAs$On: AsLongAs$OnStatic;
interface AsLongAsDuring$OnStatic {
    readonly class: any;
}
export declare const AsLongAsDuring$On: AsLongAsDuring$OnStatic;
interface AsLongAsDuringStatic {
    readonly class: any;
}
export declare const AsLongAsDuring: AsLongAsDuringStatic;
interface AsLongAsStatic {
    readonly class: any;
}
export declare const AsLongAs: AsLongAsStatic;
interface Assertion$WithPathAndCountMetricStatic {
    readonly class: any;
}
export declare const Assertion$WithPathAndCountMetric: Assertion$WithPathAndCountMetricStatic;
interface Assertion$WithPathAndTargetStatic {
    readonly class: any;
}
export declare const Assertion$WithPathAndTarget: Assertion$WithPathAndTargetStatic;
interface Assertion$WithPathAndTimeMetricStatic {
    readonly class: any;
}
export declare const Assertion$WithPathAndTimeMetric: Assertion$WithPathAndTimeMetricStatic;
interface Assertion$WithPathStatic {
    readonly class: any;
}
export declare const Assertion$WithPath: Assertion$WithPathStatic;
interface AssertionStatic {
    readonly class: any;
}
export declare const Assertion: AssertionStatic;
interface Body$WithBytesStatic {
    readonly class: any;
    new (arg0: any): io.gatling.javaapi.core.Body$WithBytes;
}
export declare const Body$WithBytes: Body$WithBytesStatic;
interface Body$WithStringStatic {
    readonly class: any;
    new (arg0: any): io.gatling.javaapi.core.Body$WithString;
}
export declare const Body$WithString: Body$WithStringStatic;
interface BodyPartStatic {
    readonly class: any;
}
export declare const BodyPart: BodyPartStatic;
interface BodyStatic {
    readonly class: any;
}
export declare const Body: BodyStatic;
interface ChainBuilderStatic {
    readonly class: any;
}
export declare const ChainBuilder: ChainBuilderStatic;
interface CheckBuilder$CaptureGroupCheckBuilderStatic {
    readonly class: any;
}
export declare const CheckBuilder$CaptureGroupCheckBuilder: CheckBuilder$CaptureGroupCheckBuilderStatic;
interface CheckBuilder$FinalStatic {
    readonly class: any;
}
export declare const CheckBuilder$Final: CheckBuilder$FinalStatic;
interface CheckBuilder$FindStatic {
    readonly class: any;
}
export declare const CheckBuilder$Find: CheckBuilder$FindStatic;
interface CheckBuilder$JsonOfTypeFindStatic {
    readonly class: any;
}
export declare const CheckBuilder$JsonOfTypeFind: CheckBuilder$JsonOfTypeFindStatic;
interface CheckBuilder$JsonOfTypeMultipleFindStatic {
    readonly class: any;
}
export declare const CheckBuilder$JsonOfTypeMultipleFind: CheckBuilder$JsonOfTypeMultipleFindStatic;
interface CheckBuilder$MultipleFindStatic {
    readonly class: any;
}
export declare const CheckBuilder$MultipleFind: CheckBuilder$MultipleFindStatic;
interface CheckBuilder$ValidateStatic {
    readonly class: any;
}
export declare const CheckBuilder$Validate: CheckBuilder$ValidateStatic;
interface CheckBuilderStatic {
    readonly class: any;
}
export declare const CheckBuilder: CheckBuilderStatic;
interface Choice$WithKeyStatic {
    readonly class: any;
}
export declare const Choice$WithKey: Choice$WithKeyStatic;
interface Choice$WithWeightStatic {
    readonly class: any;
    new (arg0: double, arg1: io.gatling.javaapi.core.ChainBuilder): io.gatling.javaapi.core.Choice$WithWeight;
}
export declare const Choice$WithWeight: Choice$WithWeightStatic;
interface ChoiceStatic {
    readonly class: any;
}
export declare const Choice: ChoiceStatic;
interface ChronoUnitStatic {
    NANOS: java.time.temporal.ChronoUnit;
    MICROS: java.time.temporal.ChronoUnit;
    MILLIS: java.time.temporal.ChronoUnit;
    SECONDS: java.time.temporal.ChronoUnit;
    MINUTES: java.time.temporal.ChronoUnit;
    HOURS: java.time.temporal.ChronoUnit;
    HALF_DAYS: java.time.temporal.ChronoUnit;
    DAYS: java.time.temporal.ChronoUnit;
    WEEKS: java.time.temporal.ChronoUnit;
    MONTHS: java.time.temporal.ChronoUnit;
    YEARS: java.time.temporal.ChronoUnit;
    DECADES: java.time.temporal.ChronoUnit;
    CENTURIES: java.time.temporal.ChronoUnit;
    MILLENNIA: java.time.temporal.ChronoUnit;
    ERAS: java.time.temporal.ChronoUnit;
    FOREVER: java.time.temporal.ChronoUnit;
    readonly class: any;
    valueOf<T>(arg0: java.lang.Class<T>, arg1: string): T;
    valueOf(arg0: string): java.time.temporal.ChronoUnit;
    values(): [java.time.temporal.ChronoUnit];
}
export declare const ChronoUnit: ChronoUnitStatic;
interface ClosedInjectionStep$CompositeStatic {
    readonly class: any;
}
export declare const ClosedInjectionStep$Composite: ClosedInjectionStep$CompositeStatic;
interface ClosedInjectionStep$ConstantStatic {
    readonly class: any;
}
export declare const ClosedInjectionStep$Constant: ClosedInjectionStep$ConstantStatic;
interface ClosedInjectionStep$RampStatic {
    readonly class: any;
    new (arg0: int): io.gatling.javaapi.core.ClosedInjectionStep$Ramp;
}
export declare const ClosedInjectionStep$Ramp: ClosedInjectionStep$RampStatic;
interface ClosedInjectionStep$RampToStatic {
    readonly class: any;
    new (arg0: int, arg1: int): io.gatling.javaapi.core.ClosedInjectionStep$RampTo;
}
export declare const ClosedInjectionStep$RampTo: ClosedInjectionStep$RampToStatic;
interface ClosedInjectionStep$StairsStatic {
    readonly class: any;
}
export declare const ClosedInjectionStep$Stairs: ClosedInjectionStep$StairsStatic;
interface ClosedInjectionStep$StairsWithTimeStatic {
    readonly class: any;
    new (arg0: int, arg1: int): io.gatling.javaapi.core.ClosedInjectionStep$StairsWithTime;
}
export declare const ClosedInjectionStep$StairsWithTime: ClosedInjectionStep$StairsWithTimeStatic;
interface ClosedInjectionStepStatic {
    readonly class: any;
}
export declare const ClosedInjectionStep: ClosedInjectionStepStatic;
interface CollectorsStatic {
    readonly class: any;
    collectingAndThen<RR, R>(arg0: any, arg1: Func<R, RR>): any;
    filtering<T>(arg0: Predicate<T>, arg1: any): any;
    toCollection<C>(arg0: Supplier<C>): any;
    partitioningBy<T>(arg0: Predicate<T>, arg1: any): any;
    groupingByConcurrent<K, T, M>(arg0: Func<T, K>, arg1: Supplier<M>, arg2: any): any;
    groupingBy<K, T>(arg0: Func<T, K>, arg1: any): any;
    groupingByConcurrent<K, T>(arg0: Func<T, K>, arg1: any): any;
    groupingBy<K, T, M>(arg0: Func<T, K>, arg1: Supplier<M>, arg2: any): any;
    toMap<K, T, U, M>(arg0: Func<T, K>, arg1: Func<T, U>, arg2: BinaryOperator<U>, arg3: Supplier<M>): any;
    toConcurrentMap<K, T, U, M>(arg0: Func<T, K>, arg1: Func<T, U>, arg2: BinaryOperator<U>, arg3: Supplier<M>): any;
    toMap<K, T, U>(arg0: Func<T, K>, arg1: Func<T, U>): any;
    toMap<K, T, U>(arg0: Func<T, K>, arg1: Func<T, U>, arg2: BinaryOperator<U>): any;
    toUnmodifiableMap<K, T, U>(arg0: Func<T, K>, arg1: Func<T, U>): any;
    toUnmodifiableMap<K, T, U>(arg0: Func<T, K>, arg1: Func<T, U>, arg2: BinaryOperator<U>): any;
    toConcurrentMap<K, T, U>(arg0: Func<T, K>, arg1: Func<T, U>): any;
    toConcurrentMap<K, T, U>(arg0: Func<T, K>, arg1: Func<T, U>, arg2: BinaryOperator<U>): any;
    groupingBy<K, T>(arg0: Func<T, K>): any;
    groupingByConcurrent<K, T>(arg0: Func<T, K>): any;
    teeing<R2, R, R1>(arg0: any, arg1: any, arg2: BiFunction<R1, R2, R>): any;
    flatMapping<T, U>(arg0: Func<T, java.util.stream.Stream<U>>, arg1: any): any;
    mapping<T, U>(arg0: Func<T, U>, arg1: any): any;
    reducing<T, U>(arg0: U, arg1: Func<T, U>, arg2: BinaryOperator<U>): any;
    reducing<T>(arg0: T, arg1: BinaryOperator<T>): any;
    averagingDouble(arg0: any): any;
    averagingInt(arg0: any): any;
    averagingLong(arg0: any): any;
    summingDouble(arg0: any): any;
    summingInt(arg0: any): any;
    counting(): any;
    summingLong(arg0: any): any;
    summarizingDouble(arg0: any): any;
    summarizingInt(arg0: any): any;
    toList(): any;
    toUnmodifiableList(): any;
    summarizingLong(arg0: any): any;
    partitioningBy<T>(arg0: Predicate<T>): any;
    maxBy(arg0: any): any;
    minBy(arg0: any): any;
    reducing<T>(arg0: BinaryOperator<T>): any;
    toSet(): any;
    toUnmodifiableSet(): any;
    joining(): any;
    joining(arg0: any): any;
    joining(arg0: any, arg1: any, arg2: any): any;
}
export declare const Collectors: CollectorsStatic;
interface ConstantRate$ConstantRateOpenInjectionStepStatic {
    readonly class: any;
    atOnceUsers(arg0: int): io.gatling.javaapi.core.OpenInjectionStep;
    nothingFor(arg0: java.time.Duration): io.gatling.javaapi.core.OpenInjectionStep;
}
export declare const ConstantRate$ConstantRateOpenInjectionStep: ConstantRate$ConstantRateOpenInjectionStepStatic;
interface CoreDslStatic {
    readonly class: any;
    details(...arg0: string[]): io.gatling.javaapi.core.Assertion$WithPath;
    forAll(): io.gatling.javaapi.core.Assertion$WithPath;
    global(): io.gatling.javaapi.core.Assertion$WithPath;
    InputStreamBody(arg0: Func<io.gatling.javaapi.core.Session, any>): io.gatling.javaapi.core.Body;
    ByteArrayBody(arg0: bytearray): io.gatling.javaapi.core.Body$WithBytes;
    ByteArrayBody(arg0: string): io.gatling.javaapi.core.Body$WithBytes;
    ByteArrayBody(arg0: Func<io.gatling.javaapi.core.Session, bytearray>): io.gatling.javaapi.core.Body$WithBytes;
    RawFileBody(arg0: string): io.gatling.javaapi.core.Body$WithBytes;
    RawFileBody(arg0: Func<io.gatling.javaapi.core.Session, string>): io.gatling.javaapi.core.Body$WithBytes;
    ElFileBody(arg0: string): io.gatling.javaapi.core.Body$WithString;
    ElFileBody(arg0: Func<io.gatling.javaapi.core.Session, string>): io.gatling.javaapi.core.Body$WithString;
    PebbleFileBody(arg0: string): io.gatling.javaapi.core.Body$WithString;
    PebbleFileBody(arg0: Func<io.gatling.javaapi.core.Session, string>): io.gatling.javaapi.core.Body$WithString;
    PebbleStringBody(arg0: string): io.gatling.javaapi.core.Body$WithString;
    StringBody(arg0: string): io.gatling.javaapi.core.Body$WithString;
    StringBody(arg0: Func<io.gatling.javaapi.core.Session, string>): io.gatling.javaapi.core.Body$WithString;
    crashLoadGenerator(arg0: string): io.gatling.javaapi.core.ChainBuilder;
    crashLoadGenerator(arg0: Func<io.gatling.javaapi.core.Session, string>): io.gatling.javaapi.core.ChainBuilder;
    crashLoadGeneratorIf(arg0: string, arg1: string): io.gatling.javaapi.core.ChainBuilder;
    crashLoadGeneratorIf(arg0: string, arg1: Func<io.gatling.javaapi.core.Session, boolean | null>): io.gatling.javaapi.core.ChainBuilder;
    crashLoadGeneratorIf(arg0: Func<io.gatling.javaapi.core.Session, string>, arg1: string): io.gatling.javaapi.core.ChainBuilder;
    crashLoadGeneratorIf(arg0: Func<io.gatling.javaapi.core.Session, string>, arg1: Func<io.gatling.javaapi.core.Session, boolean | null>): io.gatling.javaapi.core.ChainBuilder;
    exec(arg0: io.gatling.javaapi.core.exec.Executable, ...arg1: io.gatling.javaapi.core.exec.Executable[]): io.gatling.javaapi.core.ChainBuilder;
    exec(arg0: java.util.List<io.gatling.javaapi.core.ChainBuilder>): io.gatling.javaapi.core.ChainBuilder;
    exec(arg0: Func<io.gatling.javaapi.core.Session, io.gatling.javaapi.core.Session>): io.gatling.javaapi.core.ChainBuilder;
    exitHere(): io.gatling.javaapi.core.ChainBuilder;
    exitHereIf(arg0: string): io.gatling.javaapi.core.ChainBuilder;
    exitHereIf(arg0: Func<io.gatling.javaapi.core.Session, boolean | null>): io.gatling.javaapi.core.ChainBuilder;
    exitHereIfFailed(): io.gatling.javaapi.core.ChainBuilder;
    feed(arg0: io.gatling.javaapi.core.FeederBuilder<any>): io.gatling.javaapi.core.ChainBuilder;
    feed(arg0: io.gatling.javaapi.core.FeederBuilder<any>, arg1: int): io.gatling.javaapi.core.ChainBuilder;
    feed(arg0: io.gatling.javaapi.core.FeederBuilder<any>, arg1: string): io.gatling.javaapi.core.ChainBuilder;
    feed(arg0: io.gatling.javaapi.core.FeederBuilder<any>, arg1: Func<io.gatling.javaapi.core.Session, int | null>): io.gatling.javaapi.core.ChainBuilder;
    feed(arg0: java.util.Iterator<java.util.Map<string, any>>): io.gatling.javaapi.core.ChainBuilder;
    feed(arg0: java.util.Iterator<java.util.Map<string, any>>, arg1: int): io.gatling.javaapi.core.ChainBuilder;
    feed(arg0: java.util.Iterator<java.util.Map<string, any>>, arg1: string): io.gatling.javaapi.core.ChainBuilder;
    feed(arg0: java.util.Iterator<java.util.Map<string, any>>, arg1: Func<io.gatling.javaapi.core.Session, int | null>): io.gatling.javaapi.core.ChainBuilder;
    feed(arg0: Supplier<java.util.Iterator<java.util.Map<string, any>>>): io.gatling.javaapi.core.ChainBuilder;
    feed(arg0: Supplier<java.util.Iterator<java.util.Map<string, any>>>, arg1: int): io.gatling.javaapi.core.ChainBuilder;
    feed(arg0: Supplier<java.util.Iterator<java.util.Map<string, any>>>, arg1: string): io.gatling.javaapi.core.ChainBuilder;
    feed(arg0: Supplier<java.util.Iterator<java.util.Map<string, any>>>, arg1: Func<io.gatling.javaapi.core.Session, int | null>): io.gatling.javaapi.core.ChainBuilder;
    pace(arg0: string): io.gatling.javaapi.core.ChainBuilder;
    pace(arg0: string, arg1: string): io.gatling.javaapi.core.ChainBuilder;
    pace(arg0: string, arg1: string, arg2: string): io.gatling.javaapi.core.ChainBuilder;
    pace(arg0: java.time.Duration): io.gatling.javaapi.core.ChainBuilder;
    pace(arg0: java.time.Duration, arg1: string): io.gatling.javaapi.core.ChainBuilder;
    pace(arg0: java.time.Duration, arg1: java.time.Duration): io.gatling.javaapi.core.ChainBuilder;
    pace(arg0: java.time.Duration, arg1: java.time.Duration, arg2: string): io.gatling.javaapi.core.ChainBuilder;
    pace(arg0: Func<io.gatling.javaapi.core.Session, java.time.Duration>): io.gatling.javaapi.core.ChainBuilder;
    pace(arg0: Func<io.gatling.javaapi.core.Session, java.time.Duration>, arg1: string): io.gatling.javaapi.core.ChainBuilder;
    pace(arg0: Func<io.gatling.javaapi.core.Session, java.time.Duration>, arg1: Func<io.gatling.javaapi.core.Session, java.time.Duration>): io.gatling.javaapi.core.ChainBuilder;
    pace(arg0: Func<io.gatling.javaapi.core.Session, java.time.Duration>, arg1: Func<io.gatling.javaapi.core.Session, java.time.Duration>, arg2: string): io.gatling.javaapi.core.ChainBuilder;
    pace(arg0: long): io.gatling.javaapi.core.ChainBuilder;
    pace(arg0: long, arg1: string): io.gatling.javaapi.core.ChainBuilder;
    pace(arg0: long, arg1: long): io.gatling.javaapi.core.ChainBuilder;
    pace(arg0: long, arg1: long, arg2: string): io.gatling.javaapi.core.ChainBuilder;
    pause(arg0: string): io.gatling.javaapi.core.ChainBuilder;
    pause(arg0: string, arg1: io.gatling.javaapi.core.PauseType): io.gatling.javaapi.core.ChainBuilder;
    pause(arg0: string, arg1: string): io.gatling.javaapi.core.ChainBuilder;
    pause(arg0: string, arg1: string, arg2: io.gatling.javaapi.core.PauseType): io.gatling.javaapi.core.ChainBuilder;
    pause(arg0: java.time.Duration): io.gatling.javaapi.core.ChainBuilder;
    pause(arg0: java.time.Duration, arg1: io.gatling.javaapi.core.PauseType): io.gatling.javaapi.core.ChainBuilder;
    pause(arg0: java.time.Duration, arg1: java.time.Duration): io.gatling.javaapi.core.ChainBuilder;
    pause(arg0: java.time.Duration, arg1: java.time.Duration, arg2: io.gatling.javaapi.core.PauseType): io.gatling.javaapi.core.ChainBuilder;
    pause(arg0: Func<io.gatling.javaapi.core.Session, java.time.Duration>): io.gatling.javaapi.core.ChainBuilder;
    pause(arg0: Func<io.gatling.javaapi.core.Session, java.time.Duration>, arg1: io.gatling.javaapi.core.PauseType): io.gatling.javaapi.core.ChainBuilder;
    pause(arg0: Func<io.gatling.javaapi.core.Session, java.time.Duration>, arg1: Func<io.gatling.javaapi.core.Session, java.time.Duration>): io.gatling.javaapi.core.ChainBuilder;
    pause(arg0: Func<io.gatling.javaapi.core.Session, java.time.Duration>, arg1: Func<io.gatling.javaapi.core.Session, java.time.Duration>, arg2: io.gatling.javaapi.core.PauseType): io.gatling.javaapi.core.ChainBuilder;
    pause(arg0: long): io.gatling.javaapi.core.ChainBuilder;
    pause(arg0: long, arg1: io.gatling.javaapi.core.PauseType): io.gatling.javaapi.core.ChainBuilder;
    pause(arg0: long, arg1: long): io.gatling.javaapi.core.ChainBuilder;
    pause(arg0: long, arg1: long, arg2: io.gatling.javaapi.core.PauseType): io.gatling.javaapi.core.ChainBuilder;
    rendezVous(arg0: int): io.gatling.javaapi.core.ChainBuilder;
    stopLoadGenerator(arg0: string): io.gatling.javaapi.core.ChainBuilder;
    stopLoadGenerator(arg0: Func<io.gatling.javaapi.core.Session, string>): io.gatling.javaapi.core.ChainBuilder;
    stopLoadGeneratorIf(arg0: string, arg1: string): io.gatling.javaapi.core.ChainBuilder;
    stopLoadGeneratorIf(arg0: string, arg1: Func<io.gatling.javaapi.core.Session, boolean | null>): io.gatling.javaapi.core.ChainBuilder;
    stopLoadGeneratorIf(arg0: Func<io.gatling.javaapi.core.Session, string>, arg1: string): io.gatling.javaapi.core.ChainBuilder;
    stopLoadGeneratorIf(arg0: Func<io.gatling.javaapi.core.Session, string>, arg1: Func<io.gatling.javaapi.core.Session, boolean | null>): io.gatling.javaapi.core.ChainBuilder;
    regex(arg0: string): io.gatling.javaapi.core.CheckBuilder$CaptureGroupCheckBuilder;
    regex(arg0: Func<io.gatling.javaapi.core.Session, string>): io.gatling.javaapi.core.CheckBuilder$CaptureGroupCheckBuilder;
    css(arg0: string, arg1: string): any;
    css(arg0: Func<io.gatling.javaapi.core.Session, string>, arg1: string): any;
    bodyBytes(): io.gatling.javaapi.core.CheckBuilder$Find<bytearray>;
    bodyStream(): io.gatling.javaapi.core.CheckBuilder$Find<any>;
    bodyLength(): io.gatling.javaapi.core.CheckBuilder$Find<int | null>;
    responseTimeInMillis(): io.gatling.javaapi.core.CheckBuilder$Find<int | null>;
    bodyString(): io.gatling.javaapi.core.CheckBuilder$Find<string>;
    md5(): io.gatling.javaapi.core.CheckBuilder$Find<string>;
    sha1(): io.gatling.javaapi.core.CheckBuilder$Find<string>;
    jmesPath(arg0: string): io.gatling.javaapi.core.CheckBuilder$JsonOfTypeFind;
    jmesPath(arg0: Func<io.gatling.javaapi.core.Session, string>): io.gatling.javaapi.core.CheckBuilder$JsonOfTypeFind;
    jsonpJmesPath(arg0: string): io.gatling.javaapi.core.CheckBuilder$JsonOfTypeFind;
    jsonpJmesPath(arg0: Func<io.gatling.javaapi.core.Session, string>): io.gatling.javaapi.core.CheckBuilder$JsonOfTypeFind;
    jsonPath(arg0: string): io.gatling.javaapi.core.CheckBuilder$JsonOfTypeMultipleFind;
    jsonPath(arg0: Func<io.gatling.javaapi.core.Session, string>): io.gatling.javaapi.core.CheckBuilder$JsonOfTypeMultipleFind;
    jsonpJsonPath(arg0: string): io.gatling.javaapi.core.CheckBuilder$JsonOfTypeMultipleFind;
    jsonpJsonPath(arg0: Func<io.gatling.javaapi.core.Session, string>): io.gatling.javaapi.core.CheckBuilder$JsonOfTypeMultipleFind;
    substring(arg0: string): io.gatling.javaapi.core.CheckBuilder$MultipleFind<int | null>;
    substring(arg0: Func<io.gatling.javaapi.core.Session, string>): io.gatling.javaapi.core.CheckBuilder$MultipleFind<int | null>;
    css(arg0: string): io.gatling.javaapi.core.CheckBuilder$MultipleFind<string>;
    css(arg0: Func<io.gatling.javaapi.core.Session, string>): io.gatling.javaapi.core.CheckBuilder$MultipleFind<string>;
    xpath(arg0: string): io.gatling.javaapi.core.CheckBuilder$MultipleFind<string>;
    xpath(arg0: string, arg1: java.util.Map<string, string>): io.gatling.javaapi.core.CheckBuilder$MultipleFind<string>;
    xpath(arg0: Func<io.gatling.javaapi.core.Session, string>): io.gatling.javaapi.core.CheckBuilder$MultipleFind<string>;
    xpath(arg0: Func<io.gatling.javaapi.core.Session, string>, arg1: java.util.Map<string, string>): io.gatling.javaapi.core.CheckBuilder$MultipleFind<string>;
    form(arg0: string): io.gatling.javaapi.core.CheckBuilder$MultipleFind<java.util.Map<string, any>>;
    form(arg0: Func<io.gatling.javaapi.core.Session, string>): io.gatling.javaapi.core.CheckBuilder$MultipleFind<java.util.Map<string, any>>;
    onCase(arg0: any): io.gatling.javaapi.core.WithKey$Then;
    percent(arg0: double): io.gatling.javaapi.core.WithWeight$Then;
    constantConcurrentUsers(arg0: int): io.gatling.javaapi.core.ClosedInjectionStep$Constant;
    rampConcurrentUsers(arg0: int): io.gatling.javaapi.core.ClosedInjectionStep$Ramp;
    incrementConcurrentUsers(arg0: int): io.gatling.javaapi.core.ClosedInjectionStep$Stairs;
    csv(arg0: string): io.gatling.javaapi.core.FeederBuilder$Batchable<string>;
    csv(arg0: string, arg1: any): io.gatling.javaapi.core.FeederBuilder$Batchable<string>;
    separatedValues(arg0: string, arg1: any): io.gatling.javaapi.core.FeederBuilder$Batchable<string>;
    separatedValues(arg0: string, arg1: any, arg2: any): io.gatling.javaapi.core.FeederBuilder$Batchable<string>;
    ssv(arg0: string): io.gatling.javaapi.core.FeederBuilder$Batchable<string>;
    ssv(arg0: string, arg1: any): io.gatling.javaapi.core.FeederBuilder$Batchable<string>;
    tsv(arg0: string): io.gatling.javaapi.core.FeederBuilder$Batchable<string>;
    tsv(arg0: string, arg1: any): io.gatling.javaapi.core.FeederBuilder$Batchable<string>;
    jsonFile(arg0: string): io.gatling.javaapi.core.FeederBuilder$FileBased<any>;
    arrayFeeder(arg0: java.util.Map<string, any>[]): io.gatling.javaapi.core.FeederBuilder<any>;
    jsonUrl(arg0: string): io.gatling.javaapi.core.FeederBuilder<any>;
    listFeeder(arg0: java.util.List<java.util.Map<string, any>>): io.gatling.javaapi.core.FeederBuilder<any>;
    AllowList(...arg0: string[]): io.gatling.javaapi.core.Filter$AllowList;
    AllowList(arg0: java.util.List<string>): io.gatling.javaapi.core.Filter$AllowList;
    DenyList(...arg0: string[]): io.gatling.javaapi.core.Filter$DenyList;
    DenyList(arg0: java.util.List<string>): io.gatling.javaapi.core.Filter$DenyList;
    atOnceUsers(arg0: int): io.gatling.javaapi.core.OpenInjectionStep;
    nothingFor(arg0: java.time.Duration): io.gatling.javaapi.core.OpenInjectionStep;
    nothingFor(arg0: long): io.gatling.javaapi.core.OpenInjectionStep;
    constantUsersPerSec(arg0: double): io.gatling.javaapi.core.OpenInjectionStep$ConstantRate;
    rampUsers(arg0: int): io.gatling.javaapi.core.OpenInjectionStep$Ramp;
    rampUsersPerSec(arg0: double): io.gatling.javaapi.core.OpenInjectionStep$RampRate;
    incrementUsersPerSec(arg0: double): io.gatling.javaapi.core.OpenInjectionStep$Stairs;
    stressPeakUsers(arg0: int): io.gatling.javaapi.core.OpenInjectionStep$StressPeak;
    customPauses(arg0: Func<io.gatling.javaapi.core.Session, long | null>): io.gatling.javaapi.core.PauseType;
    normalPausesWithPercentageDuration(arg0: double): io.gatling.javaapi.core.PauseType;
    normalPausesWithStdDevDuration(arg0: java.time.Duration): io.gatling.javaapi.core.PauseType;
    uniformPausesPlusOrMinusDuration(arg0: java.time.Duration): io.gatling.javaapi.core.PauseType;
    uniformPausesPlusOrMinusPercentage(arg0: double): io.gatling.javaapi.core.PauseType;
    scenario(arg0: string): io.gatling.javaapi.core.ScenarioBuilder;
    holdFor(arg0: java.time.Duration): io.gatling.javaapi.core.ThrottleStep;
    holdFor(arg0: long): io.gatling.javaapi.core.ThrottleStep;
    jumpToRps(arg0: int): io.gatling.javaapi.core.ThrottleStep;
    reachRps(arg0: int): io.gatling.javaapi.core.ThrottleStep$ReachIntermediate;
    doIf(arg0: string): io.gatling.javaapi.core.condition.DoIf$Then<io.gatling.javaapi.core.ChainBuilder>;
    doIf(arg0: Func<io.gatling.javaapi.core.Session, boolean | null>): io.gatling.javaapi.core.condition.DoIf$Then<io.gatling.javaapi.core.ChainBuilder>;
    doIfEquals(arg0: string, arg1: any): io.gatling.javaapi.core.condition.DoIfEquals$Then<io.gatling.javaapi.core.ChainBuilder>;
    doIfEquals(arg0: string, arg1: string): io.gatling.javaapi.core.condition.DoIfEquals$Then<io.gatling.javaapi.core.ChainBuilder>;
    doIfEquals(arg0: string, arg1: Func<io.gatling.javaapi.core.Session, any>): io.gatling.javaapi.core.condition.DoIfEquals$Then<io.gatling.javaapi.core.ChainBuilder>;
    doIfEquals(arg0: Func<io.gatling.javaapi.core.Session, any>, arg1: any): io.gatling.javaapi.core.condition.DoIfEquals$Then<io.gatling.javaapi.core.ChainBuilder>;
    doIfEquals(arg0: Func<io.gatling.javaapi.core.Session, any>, arg1: string): io.gatling.javaapi.core.condition.DoIfEquals$Then<io.gatling.javaapi.core.ChainBuilder>;
    doIfEquals(arg0: Func<io.gatling.javaapi.core.Session, any>, arg1: Func<io.gatling.javaapi.core.Session, any>): io.gatling.javaapi.core.condition.DoIfEquals$Then<io.gatling.javaapi.core.ChainBuilder>;
    doIfEqualsOrElse(arg0: string, arg1: any): io.gatling.javaapi.core.condition.DoIfEqualsOrElse$Then<io.gatling.javaapi.core.ChainBuilder>;
    doIfEqualsOrElse(arg0: string, arg1: string): io.gatling.javaapi.core.condition.DoIfEqualsOrElse$Then<io.gatling.javaapi.core.ChainBuilder>;
    doIfEqualsOrElse(arg0: string, arg1: Func<io.gatling.javaapi.core.Session, any>): io.gatling.javaapi.core.condition.DoIfEqualsOrElse$Then<io.gatling.javaapi.core.ChainBuilder>;
    doIfEqualsOrElse(arg0: Func<io.gatling.javaapi.core.Session, any>, arg1: any): io.gatling.javaapi.core.condition.DoIfEqualsOrElse$Then<io.gatling.javaapi.core.ChainBuilder>;
    doIfEqualsOrElse(arg0: Func<io.gatling.javaapi.core.Session, any>, arg1: string): io.gatling.javaapi.core.condition.DoIfEqualsOrElse$Then<io.gatling.javaapi.core.ChainBuilder>;
    doIfEqualsOrElse(arg0: Func<io.gatling.javaapi.core.Session, any>, arg1: Func<io.gatling.javaapi.core.Session, any>): io.gatling.javaapi.core.condition.DoIfEqualsOrElse$Then<io.gatling.javaapi.core.ChainBuilder>;
    doIfOrElse(arg0: string): io.gatling.javaapi.core.condition.DoIfOrElse$Then<io.gatling.javaapi.core.ChainBuilder>;
    doIfOrElse(arg0: Func<io.gatling.javaapi.core.Session, boolean | null>): io.gatling.javaapi.core.condition.DoIfOrElse$Then<io.gatling.javaapi.core.ChainBuilder>;
    doSwitch(arg0: string): io.gatling.javaapi.core.condition.DoSwitch$On<io.gatling.javaapi.core.ChainBuilder>;
    doSwitch(arg0: Func<io.gatling.javaapi.core.Session, any>): io.gatling.javaapi.core.condition.DoSwitch$On<io.gatling.javaapi.core.ChainBuilder>;
    doSwitchOrElse(arg0: string): io.gatling.javaapi.core.condition.DoSwitchOrElse$On<io.gatling.javaapi.core.ChainBuilder>;
    doSwitchOrElse(arg0: Func<io.gatling.javaapi.core.Session, any>): io.gatling.javaapi.core.condition.DoSwitchOrElse$On<io.gatling.javaapi.core.ChainBuilder>;
    randomSwitch(): io.gatling.javaapi.core.condition.RandomSwitch$On<io.gatling.javaapi.core.ChainBuilder>;
    randomSwitchOrElse(): io.gatling.javaapi.core.condition.RandomSwitchOrElse$On<io.gatling.javaapi.core.ChainBuilder>;
    roundRobinSwitch(): io.gatling.javaapi.core.condition.RoundRobinSwitch$On<io.gatling.javaapi.core.ChainBuilder>;
    uniformRandomSwitch(): io.gatling.javaapi.core.condition.UniformRandomSwitch$On<io.gatling.javaapi.core.ChainBuilder>;
    exitBlockOnFail(): io.gatling.javaapi.core.error.Errors$ExitBlockOnFail<io.gatling.javaapi.core.ChainBuilder>;
    tryMax(arg0: int): io.gatling.javaapi.core.error.Errors$TryMax<io.gatling.javaapi.core.ChainBuilder>;
    tryMax(arg0: int, arg1: string): io.gatling.javaapi.core.error.Errors$TryMax<io.gatling.javaapi.core.ChainBuilder>;
    tryMax(arg0: string): io.gatling.javaapi.core.error.Errors$TryMax<io.gatling.javaapi.core.ChainBuilder>;
    tryMax(arg0: string, arg1: string): io.gatling.javaapi.core.error.Errors$TryMax<io.gatling.javaapi.core.ChainBuilder>;
    tryMax(arg0: Func<io.gatling.javaapi.core.Session, int | null>): io.gatling.javaapi.core.error.Errors$TryMax<io.gatling.javaapi.core.ChainBuilder>;
    tryMax(arg0: Func<io.gatling.javaapi.core.Session, int | null>, arg1: string): io.gatling.javaapi.core.error.Errors$TryMax<io.gatling.javaapi.core.ChainBuilder>;
    group(arg0: string): io.gatling.javaapi.core.group.Groups$On<io.gatling.javaapi.core.ChainBuilder>;
    group(arg0: Func<io.gatling.javaapi.core.Session, string>): io.gatling.javaapi.core.group.Groups$On<io.gatling.javaapi.core.ChainBuilder>;
    asLongAs(arg0: string): io.gatling.javaapi.core.loop.AsLongAs$On<io.gatling.javaapi.core.ChainBuilder>;
    asLongAs(arg0: string, arg1: boolean): io.gatling.javaapi.core.loop.AsLongAs$On<io.gatling.javaapi.core.ChainBuilder>;
    asLongAs(arg0: string, arg1: string): io.gatling.javaapi.core.loop.AsLongAs$On<io.gatling.javaapi.core.ChainBuilder>;
    asLongAs(arg0: string, arg1: string, arg2: boolean): io.gatling.javaapi.core.loop.AsLongAs$On<io.gatling.javaapi.core.ChainBuilder>;
    asLongAs(arg0: Func<io.gatling.javaapi.core.Session, boolean | null>): io.gatling.javaapi.core.loop.AsLongAs$On<io.gatling.javaapi.core.ChainBuilder>;
    asLongAs(arg0: Func<io.gatling.javaapi.core.Session, boolean | null>, arg1: boolean): io.gatling.javaapi.core.loop.AsLongAs$On<io.gatling.javaapi.core.ChainBuilder>;
    asLongAs(arg0: Func<io.gatling.javaapi.core.Session, boolean | null>, arg1: string): io.gatling.javaapi.core.loop.AsLongAs$On<io.gatling.javaapi.core.ChainBuilder>;
    asLongAs(arg0: Func<io.gatling.javaapi.core.Session, boolean | null>, arg1: string, arg2: boolean): io.gatling.javaapi.core.loop.AsLongAs$On<io.gatling.javaapi.core.ChainBuilder>;
    asLongAsDuring(arg0: string, arg1: string): io.gatling.javaapi.core.loop.AsLongAsDuring$On<io.gatling.javaapi.core.ChainBuilder>;
    asLongAsDuring(arg0: string, arg1: string, arg2: boolean): io.gatling.javaapi.core.loop.AsLongAsDuring$On<io.gatling.javaapi.core.ChainBuilder>;
    asLongAsDuring(arg0: string, arg1: string, arg2: string): io.gatling.javaapi.core.loop.AsLongAsDuring$On<io.gatling.javaapi.core.ChainBuilder>;
    asLongAsDuring(arg0: string, arg1: string, arg2: string, arg3: boolean): io.gatling.javaapi.core.loop.AsLongAsDuring$On<io.gatling.javaapi.core.ChainBuilder>;
    asLongAsDuring(arg0: string, arg1: java.time.Duration): io.gatling.javaapi.core.loop.AsLongAsDuring$On<io.gatling.javaapi.core.ChainBuilder>;
    asLongAsDuring(arg0: string, arg1: java.time.Duration, arg2: boolean): io.gatling.javaapi.core.loop.AsLongAsDuring$On<io.gatling.javaapi.core.ChainBuilder>;
    asLongAsDuring(arg0: string, arg1: java.time.Duration, arg2: string): io.gatling.javaapi.core.loop.AsLongAsDuring$On<io.gatling.javaapi.core.ChainBuilder>;
    asLongAsDuring(arg0: string, arg1: java.time.Duration, arg2: string, arg3: boolean): io.gatling.javaapi.core.loop.AsLongAsDuring$On<io.gatling.javaapi.core.ChainBuilder>;
    asLongAsDuring(arg0: string, arg1: Func<io.gatling.javaapi.core.Session, java.time.Duration>): io.gatling.javaapi.core.loop.AsLongAsDuring$On<io.gatling.javaapi.core.ChainBuilder>;
    asLongAsDuring(arg0: string, arg1: Func<io.gatling.javaapi.core.Session, java.time.Duration>, arg2: boolean): io.gatling.javaapi.core.loop.AsLongAsDuring$On<io.gatling.javaapi.core.ChainBuilder>;
    asLongAsDuring(arg0: string, arg1: Func<io.gatling.javaapi.core.Session, java.time.Duration>, arg2: string): io.gatling.javaapi.core.loop.AsLongAsDuring$On<io.gatling.javaapi.core.ChainBuilder>;
    asLongAsDuring(arg0: string, arg1: Func<io.gatling.javaapi.core.Session, java.time.Duration>, arg2: string, arg3: boolean): io.gatling.javaapi.core.loop.AsLongAsDuring$On<io.gatling.javaapi.core.ChainBuilder>;
    asLongAsDuring(arg0: string, arg1: long): io.gatling.javaapi.core.loop.AsLongAsDuring$On<io.gatling.javaapi.core.ChainBuilder>;
    asLongAsDuring(arg0: string, arg1: long, arg2: boolean): io.gatling.javaapi.core.loop.AsLongAsDuring$On<io.gatling.javaapi.core.ChainBuilder>;
    asLongAsDuring(arg0: string, arg1: long, arg2: string): io.gatling.javaapi.core.loop.AsLongAsDuring$On<io.gatling.javaapi.core.ChainBuilder>;
    asLongAsDuring(arg0: string, arg1: long, arg2: string, arg3: boolean): io.gatling.javaapi.core.loop.AsLongAsDuring$On<io.gatling.javaapi.core.ChainBuilder>;
    asLongAsDuring(arg0: Func<io.gatling.javaapi.core.Session, boolean | null>, arg1: java.time.Duration): io.gatling.javaapi.core.loop.AsLongAsDuring$On<io.gatling.javaapi.core.ChainBuilder>;
    asLongAsDuring(arg0: Func<io.gatling.javaapi.core.Session, boolean | null>, arg1: java.time.Duration, arg2: boolean): io.gatling.javaapi.core.loop.AsLongAsDuring$On<io.gatling.javaapi.core.ChainBuilder>;
    asLongAsDuring(arg0: Func<io.gatling.javaapi.core.Session, boolean | null>, arg1: java.time.Duration, arg2: string): io.gatling.javaapi.core.loop.AsLongAsDuring$On<io.gatling.javaapi.core.ChainBuilder>;
    asLongAsDuring(arg0: Func<io.gatling.javaapi.core.Session, boolean | null>, arg1: java.time.Duration, arg2: string, arg3: boolean): io.gatling.javaapi.core.loop.AsLongAsDuring$On<io.gatling.javaapi.core.ChainBuilder>;
    asLongAsDuring(arg0: Func<io.gatling.javaapi.core.Session, boolean | null>, arg1: Func<io.gatling.javaapi.core.Session, java.time.Duration>): io.gatling.javaapi.core.loop.AsLongAsDuring$On<io.gatling.javaapi.core.ChainBuilder>;
    asLongAsDuring(arg0: Func<io.gatling.javaapi.core.Session, boolean | null>, arg1: Func<io.gatling.javaapi.core.Session, java.time.Duration>, arg2: boolean): io.gatling.javaapi.core.loop.AsLongAsDuring$On<io.gatling.javaapi.core.ChainBuilder>;
    asLongAsDuring(arg0: Func<io.gatling.javaapi.core.Session, boolean | null>, arg1: Func<io.gatling.javaapi.core.Session, java.time.Duration>, arg2: string): io.gatling.javaapi.core.loop.AsLongAsDuring$On<io.gatling.javaapi.core.ChainBuilder>;
    asLongAsDuring(arg0: Func<io.gatling.javaapi.core.Session, boolean | null>, arg1: Func<io.gatling.javaapi.core.Session, java.time.Duration>, arg2: string, arg3: boolean): io.gatling.javaapi.core.loop.AsLongAsDuring$On<io.gatling.javaapi.core.ChainBuilder>;
    asLongAsDuring(arg0: Func<io.gatling.javaapi.core.Session, boolean | null>, arg1: long): io.gatling.javaapi.core.loop.AsLongAsDuring$On<io.gatling.javaapi.core.ChainBuilder>;
    asLongAsDuring(arg0: Func<io.gatling.javaapi.core.Session, boolean | null>, arg1: long, arg2: boolean): io.gatling.javaapi.core.loop.AsLongAsDuring$On<io.gatling.javaapi.core.ChainBuilder>;
    asLongAsDuring(arg0: Func<io.gatling.javaapi.core.Session, boolean | null>, arg1: long, arg2: string): io.gatling.javaapi.core.loop.AsLongAsDuring$On<io.gatling.javaapi.core.ChainBuilder>;
    asLongAsDuring(arg0: Func<io.gatling.javaapi.core.Session, boolean | null>, arg1: long, arg2: string, arg3: boolean): io.gatling.javaapi.core.loop.AsLongAsDuring$On<io.gatling.javaapi.core.ChainBuilder>;
    doWhile(arg0: string): io.gatling.javaapi.core.loop.DoWhile$On<io.gatling.javaapi.core.ChainBuilder>;
    doWhile(arg0: string, arg1: string): io.gatling.javaapi.core.loop.DoWhile$On<io.gatling.javaapi.core.ChainBuilder>;
    doWhile(arg0: Func<io.gatling.javaapi.core.Session, boolean | null>): io.gatling.javaapi.core.loop.DoWhile$On<io.gatling.javaapi.core.ChainBuilder>;
    doWhile(arg0: Func<io.gatling.javaapi.core.Session, boolean | null>, arg1: string): io.gatling.javaapi.core.loop.DoWhile$On<io.gatling.javaapi.core.ChainBuilder>;
    doWhileDuring(arg0: string, arg1: string): io.gatling.javaapi.core.loop.DoWhileDuring$On<io.gatling.javaapi.core.ChainBuilder>;
    doWhileDuring(arg0: string, arg1: string, arg2: boolean): io.gatling.javaapi.core.loop.DoWhileDuring$On<io.gatling.javaapi.core.ChainBuilder>;
    doWhileDuring(arg0: string, arg1: string, arg2: string): io.gatling.javaapi.core.loop.DoWhileDuring$On<io.gatling.javaapi.core.ChainBuilder>;
    doWhileDuring(arg0: string, arg1: string, arg2: string, arg3: boolean): io.gatling.javaapi.core.loop.DoWhileDuring$On<io.gatling.javaapi.core.ChainBuilder>;
    doWhileDuring(arg0: string, arg1: java.time.Duration): io.gatling.javaapi.core.loop.DoWhileDuring$On<io.gatling.javaapi.core.ChainBuilder>;
    doWhileDuring(arg0: string, arg1: java.time.Duration, arg2: boolean): io.gatling.javaapi.core.loop.DoWhileDuring$On<io.gatling.javaapi.core.ChainBuilder>;
    doWhileDuring(arg0: string, arg1: java.time.Duration, arg2: string): io.gatling.javaapi.core.loop.DoWhileDuring$On<io.gatling.javaapi.core.ChainBuilder>;
    doWhileDuring(arg0: string, arg1: java.time.Duration, arg2: string, arg3: boolean): io.gatling.javaapi.core.loop.DoWhileDuring$On<io.gatling.javaapi.core.ChainBuilder>;
    doWhileDuring(arg0: string, arg1: Func<io.gatling.javaapi.core.Session, java.time.Duration>): io.gatling.javaapi.core.loop.DoWhileDuring$On<io.gatling.javaapi.core.ChainBuilder>;
    doWhileDuring(arg0: string, arg1: Func<io.gatling.javaapi.core.Session, java.time.Duration>, arg2: boolean): io.gatling.javaapi.core.loop.DoWhileDuring$On<io.gatling.javaapi.core.ChainBuilder>;
    doWhileDuring(arg0: string, arg1: Func<io.gatling.javaapi.core.Session, java.time.Duration>, arg2: string): io.gatling.javaapi.core.loop.DoWhileDuring$On<io.gatling.javaapi.core.ChainBuilder>;
    doWhileDuring(arg0: string, arg1: Func<io.gatling.javaapi.core.Session, java.time.Duration>, arg2: string, arg3: boolean): io.gatling.javaapi.core.loop.DoWhileDuring$On<io.gatling.javaapi.core.ChainBuilder>;
    doWhileDuring(arg0: string, arg1: long): io.gatling.javaapi.core.loop.DoWhileDuring$On<io.gatling.javaapi.core.ChainBuilder>;
    doWhileDuring(arg0: string, arg1: long, arg2: boolean): io.gatling.javaapi.core.loop.DoWhileDuring$On<io.gatling.javaapi.core.ChainBuilder>;
    doWhileDuring(arg0: string, arg1: long, arg2: string): io.gatling.javaapi.core.loop.DoWhileDuring$On<io.gatling.javaapi.core.ChainBuilder>;
    doWhileDuring(arg0: string, arg1: long, arg2: string, arg3: boolean): io.gatling.javaapi.core.loop.DoWhileDuring$On<io.gatling.javaapi.core.ChainBuilder>;
    doWhileDuring(arg0: Func<io.gatling.javaapi.core.Session, boolean | null>, arg1: java.time.Duration): io.gatling.javaapi.core.loop.DoWhileDuring$On<io.gatling.javaapi.core.ChainBuilder>;
    doWhileDuring(arg0: Func<io.gatling.javaapi.core.Session, boolean | null>, arg1: java.time.Duration, arg2: boolean): io.gatling.javaapi.core.loop.DoWhileDuring$On<io.gatling.javaapi.core.ChainBuilder>;
    doWhileDuring(arg0: Func<io.gatling.javaapi.core.Session, boolean | null>, arg1: java.time.Duration, arg2: string): io.gatling.javaapi.core.loop.DoWhileDuring$On<io.gatling.javaapi.core.ChainBuilder>;
    doWhileDuring(arg0: Func<io.gatling.javaapi.core.Session, boolean | null>, arg1: java.time.Duration, arg2: string, arg3: boolean): io.gatling.javaapi.core.loop.DoWhileDuring$On<io.gatling.javaapi.core.ChainBuilder>;
    doWhileDuring(arg0: Func<io.gatling.javaapi.core.Session, boolean | null>, arg1: Func<io.gatling.javaapi.core.Session, java.time.Duration>): io.gatling.javaapi.core.loop.DoWhileDuring$On<io.gatling.javaapi.core.ChainBuilder>;
    doWhileDuring(arg0: Func<io.gatling.javaapi.core.Session, boolean | null>, arg1: Func<io.gatling.javaapi.core.Session, java.time.Duration>, arg2: boolean): io.gatling.javaapi.core.loop.DoWhileDuring$On<io.gatling.javaapi.core.ChainBuilder>;
    doWhileDuring(arg0: Func<io.gatling.javaapi.core.Session, boolean | null>, arg1: Func<io.gatling.javaapi.core.Session, java.time.Duration>, arg2: string): io.gatling.javaapi.core.loop.DoWhileDuring$On<io.gatling.javaapi.core.ChainBuilder>;
    doWhileDuring(arg0: Func<io.gatling.javaapi.core.Session, boolean | null>, arg1: Func<io.gatling.javaapi.core.Session, java.time.Duration>, arg2: string, arg3: boolean): io.gatling.javaapi.core.loop.DoWhileDuring$On<io.gatling.javaapi.core.ChainBuilder>;
    doWhileDuring(arg0: Func<io.gatling.javaapi.core.Session, boolean | null>, arg1: long): io.gatling.javaapi.core.loop.DoWhileDuring$On<io.gatling.javaapi.core.ChainBuilder>;
    doWhileDuring(arg0: Func<io.gatling.javaapi.core.Session, boolean | null>, arg1: long, arg2: boolean): io.gatling.javaapi.core.loop.DoWhileDuring$On<io.gatling.javaapi.core.ChainBuilder>;
    doWhileDuring(arg0: Func<io.gatling.javaapi.core.Session, boolean | null>, arg1: long, arg2: string): io.gatling.javaapi.core.loop.DoWhileDuring$On<io.gatling.javaapi.core.ChainBuilder>;
    doWhileDuring(arg0: Func<io.gatling.javaapi.core.Session, boolean | null>, arg1: long, arg2: string, arg3: boolean): io.gatling.javaapi.core.loop.DoWhileDuring$On<io.gatling.javaapi.core.ChainBuilder>;
    during(arg0: string): io.gatling.javaapi.core.loop.During$On<io.gatling.javaapi.core.ChainBuilder>;
    during(arg0: string, arg1: boolean): io.gatling.javaapi.core.loop.During$On<io.gatling.javaapi.core.ChainBuilder>;
    during(arg0: string, arg1: string): io.gatling.javaapi.core.loop.During$On<io.gatling.javaapi.core.ChainBuilder>;
    during(arg0: string, arg1: string, arg2: boolean): io.gatling.javaapi.core.loop.During$On<io.gatling.javaapi.core.ChainBuilder>;
    during(arg0: java.time.Duration): io.gatling.javaapi.core.loop.During$On<io.gatling.javaapi.core.ChainBuilder>;
    during(arg0: java.time.Duration, arg1: boolean): io.gatling.javaapi.core.loop.During$On<io.gatling.javaapi.core.ChainBuilder>;
    during(arg0: java.time.Duration, arg1: string): io.gatling.javaapi.core.loop.During$On<io.gatling.javaapi.core.ChainBuilder>;
    during(arg0: java.time.Duration, arg1: string, arg2: boolean): io.gatling.javaapi.core.loop.During$On<io.gatling.javaapi.core.ChainBuilder>;
    during(arg0: Func<io.gatling.javaapi.core.Session, java.time.Duration>): io.gatling.javaapi.core.loop.During$On<io.gatling.javaapi.core.ChainBuilder>;
    during(arg0: Func<io.gatling.javaapi.core.Session, java.time.Duration>, arg1: boolean): io.gatling.javaapi.core.loop.During$On<io.gatling.javaapi.core.ChainBuilder>;
    during(arg0: Func<io.gatling.javaapi.core.Session, java.time.Duration>, arg1: string): io.gatling.javaapi.core.loop.During$On<io.gatling.javaapi.core.ChainBuilder>;
    during(arg0: Func<io.gatling.javaapi.core.Session, java.time.Duration>, arg1: string, arg2: boolean): io.gatling.javaapi.core.loop.During$On<io.gatling.javaapi.core.ChainBuilder>;
    during(arg0: long): io.gatling.javaapi.core.loop.During$On<io.gatling.javaapi.core.ChainBuilder>;
    during(arg0: long, arg1: boolean): io.gatling.javaapi.core.loop.During$On<io.gatling.javaapi.core.ChainBuilder>;
    during(arg0: long, arg1: string): io.gatling.javaapi.core.loop.During$On<io.gatling.javaapi.core.ChainBuilder>;
    during(arg0: long, arg1: string, arg2: boolean): io.gatling.javaapi.core.loop.During$On<io.gatling.javaapi.core.ChainBuilder>;
    foreach(arg0: string, arg1: string): io.gatling.javaapi.core.loop.ForEach$On<io.gatling.javaapi.core.ChainBuilder>;
    foreach(arg0: string, arg1: string, arg2: string): io.gatling.javaapi.core.loop.ForEach$On<io.gatling.javaapi.core.ChainBuilder>;
    foreach(arg0: java.util.List<any>, arg1: string): io.gatling.javaapi.core.loop.ForEach$On<io.gatling.javaapi.core.ChainBuilder>;
    foreach(arg0: java.util.List<any>, arg1: string, arg2: string): io.gatling.javaapi.core.loop.ForEach$On<io.gatling.javaapi.core.ChainBuilder>;
    foreach(arg0: Func<io.gatling.javaapi.core.Session, java.util.List<any>>, arg1: string): io.gatling.javaapi.core.loop.ForEach$On<io.gatling.javaapi.core.ChainBuilder>;
    foreach(arg0: Func<io.gatling.javaapi.core.Session, java.util.List<any>>, arg1: string, arg2: string): io.gatling.javaapi.core.loop.ForEach$On<io.gatling.javaapi.core.ChainBuilder>;
    forever(): io.gatling.javaapi.core.loop.Forever$On<io.gatling.javaapi.core.ChainBuilder>;
    forever(arg0: string): io.gatling.javaapi.core.loop.Forever$On<io.gatling.javaapi.core.ChainBuilder>;
    repeat(arg0: int): io.gatling.javaapi.core.loop.Repeat$On<io.gatling.javaapi.core.ChainBuilder>;
    repeat(arg0: int, arg1: string): io.gatling.javaapi.core.loop.Repeat$On<io.gatling.javaapi.core.ChainBuilder>;
    repeat(arg0: string): io.gatling.javaapi.core.loop.Repeat$On<io.gatling.javaapi.core.ChainBuilder>;
    repeat(arg0: string, arg1: string): io.gatling.javaapi.core.loop.Repeat$On<io.gatling.javaapi.core.ChainBuilder>;
    repeat(arg0: Func<io.gatling.javaapi.core.Session, int | null>): io.gatling.javaapi.core.loop.Repeat$On<io.gatling.javaapi.core.ChainBuilder>;
    repeat(arg0: Func<io.gatling.javaapi.core.Session, int | null>, arg1: string): io.gatling.javaapi.core.loop.Repeat$On<io.gatling.javaapi.core.ChainBuilder>;
    registerJmesPathFunctions(...arg0: any[]): void;
    registerPebbleExtensions(...arg0: any[]): void;
}
export declare const CoreDsl: CoreDslStatic;
interface DoIf$ThenStatic {
    readonly class: any;
}
export declare const DoIf$Then: DoIf$ThenStatic;
interface DoIfEquals$ThenStatic {
    readonly class: any;
}
export declare const DoIfEquals$Then: DoIfEquals$ThenStatic;
interface DoIfEqualsOrElse$ThenStatic {
    readonly class: any;
}
export declare const DoIfEqualsOrElse$Then: DoIfEqualsOrElse$ThenStatic;
interface DoIfEqualsOrElseStatic {
    readonly class: any;
}
export declare const DoIfEqualsOrElse: DoIfEqualsOrElseStatic;
interface DoIfEqualsStatic {
    readonly class: any;
}
export declare const DoIfEquals: DoIfEqualsStatic;
interface DoIfOrElse$OrElseStatic {
    readonly class: any;
}
export declare const DoIfOrElse$OrElse: DoIfOrElse$OrElseStatic;
interface DoIfOrElse$ThenStatic {
    readonly class: any;
}
export declare const DoIfOrElse$Then: DoIfOrElse$ThenStatic;
interface DoIfOrElseStatic {
    readonly class: any;
}
export declare const DoIfOrElse: DoIfOrElseStatic;
interface DoIfStatic {
    readonly class: any;
}
export declare const DoIf: DoIfStatic;
interface DoSwitch$OnStatic {
    readonly class: any;
}
export declare const DoSwitch$On: DoSwitch$OnStatic;
interface DoSwitchOrElse$OnStatic {
    readonly class: any;
}
export declare const DoSwitchOrElse$On: DoSwitchOrElse$OnStatic;
interface DoSwitchOrElse$OrElseStatic {
    readonly class: any;
}
export declare const DoSwitchOrElse$OrElse: DoSwitchOrElse$OrElseStatic;
interface DoSwitchOrElseStatic {
    readonly class: any;
}
export declare const DoSwitchOrElse: DoSwitchOrElseStatic;
interface DoSwitchStatic {
    readonly class: any;
}
export declare const DoSwitch: DoSwitchStatic;
interface DoWhile$OnStatic {
    readonly class: any;
}
export declare const DoWhile$On: DoWhile$OnStatic;
interface DoWhileDuring$OnStatic {
    readonly class: any;
}
export declare const DoWhileDuring$On: DoWhileDuring$OnStatic;
interface DoWhileDuringStatic {
    readonly class: any;
}
export declare const DoWhileDuring: DoWhileDuringStatic;
interface DoWhileStatic {
    readonly class: any;
}
export declare const DoWhile: DoWhileStatic;
interface DurationStatic {
    readonly class: any;
    between(arg0: any, arg1: any): java.time.Duration;
    from(arg0: any): java.time.Duration;
    of(arg0: long, arg1: java.time.temporal.TemporalUnit): java.time.Duration;
    ofDays(arg0: long): java.time.Duration;
    ofHours(arg0: long): java.time.Duration;
    ofMillis(arg0: long): java.time.Duration;
    ofMinutes(arg0: long): java.time.Duration;
    ofNanos(arg0: long): java.time.Duration;
    ofSeconds(arg0: long): java.time.Duration;
    ofSeconds(arg0: long, arg1: long): java.time.Duration;
    parse(arg0: any): java.time.Duration;
}
export declare const Duration: DurationStatic;
interface During$OnStatic {
    readonly class: any;
}
export declare const During$On: During$OnStatic;
interface DuringStatic {
    readonly class: any;
}
export declare const During: DuringStatic;
interface Errors$ExitBlockOnFailStatic {
    readonly class: any;
}
export declare const Errors$ExitBlockOnFail: Errors$ExitBlockOnFailStatic;
interface Errors$TryMaxStatic {
    readonly class: any;
}
export declare const Errors$TryMax: Errors$TryMaxStatic;
interface ErrorsStatic {
    readonly class: any;
}
export declare const Errors: ErrorsStatic;
interface ExecsStatic {
    readonly class: any;
}
export declare const Execs: ExecsStatic;
interface ExecutableStatic {
    readonly class: any;
}
export declare const Executable: ExecutableStatic;
interface FeederBuilder$BatchableStatic {
    readonly class: any;
}
export declare const FeederBuilder$Batchable: FeederBuilder$BatchableStatic;
interface FeederBuilder$FileBasedStatic {
    readonly class: any;
}
export declare const FeederBuilder$FileBased: FeederBuilder$FileBasedStatic;
interface FeederBuilderStatic {
    readonly class: any;
}
export declare const FeederBuilder: FeederBuilderStatic;
interface FeedsStatic {
    readonly class: any;
}
export declare const Feeds: FeedsStatic;
interface Filter$AllowListStatic {
    readonly class: any;
    new (arg0: java.util.List<string>): io.gatling.javaapi.core.Filter$AllowList;
}
export declare const Filter$AllowList: Filter$AllowListStatic;
interface Filter$DenyListStatic {
    readonly class: any;
    new (arg0: java.util.List<string>): io.gatling.javaapi.core.Filter$DenyList;
}
export declare const Filter$DenyList: Filter$DenyListStatic;
interface FilterStatic {
    readonly class: any;
}
export declare const Filter: FilterStatic;
interface ForEach$OnStatic {
    readonly class: any;
}
export declare const ForEach$On: ForEach$OnStatic;
interface ForEachStatic {
    readonly class: any;
}
export declare const ForEach: ForEachStatic;
interface Forever$OnStatic {
    readonly class: any;
}
export declare const Forever$On: Forever$OnStatic;
interface ForeverStatic {
    readonly class: any;
}
export declare const Forever: ForeverStatic;
interface GetCookieStatic {
    readonly class: any;
}
export declare const GetCookie: GetCookieStatic;
interface Groups$OnStatic {
    readonly class: any;
}
export declare const Groups$On: Groups$OnStatic;
interface GroupsStatic {
    readonly class: any;
}
export declare const Groups: GroupsStatic;
interface HttpDslStatic {
    readonly class: any;
    addCookie(arg0: io.gatling.javaapi.http.AddCookie): io.gatling.javaapi.core.ActionBuilder;
    flushCookieJar(): io.gatling.javaapi.core.ActionBuilder;
    flushHttpCache(): io.gatling.javaapi.core.ActionBuilder;
    flushSessionCookies(): io.gatling.javaapi.core.ActionBuilder;
    getCookieValue(arg0: io.gatling.javaapi.http.GetCookie): io.gatling.javaapi.core.ActionBuilder;
    currentLocationRegex(arg0: string): io.gatling.javaapi.core.CheckBuilder$CaptureGroupCheckBuilder;
    headerRegex(arg0: any, arg1: string): io.gatling.javaapi.core.CheckBuilder$CaptureGroupCheckBuilder;
    headerRegex(arg0: any, arg1: Func<io.gatling.javaapi.core.Session, string>): io.gatling.javaapi.core.CheckBuilder$CaptureGroupCheckBuilder;
    headerRegex(arg0: string, arg1: string): io.gatling.javaapi.core.CheckBuilder$CaptureGroupCheckBuilder;
    headerRegex(arg0: string, arg1: Func<io.gatling.javaapi.core.Session, string>): io.gatling.javaapi.core.CheckBuilder$CaptureGroupCheckBuilder;
    headerRegex(arg0: Func<io.gatling.javaapi.core.Session, any>, arg1: string): io.gatling.javaapi.core.CheckBuilder$CaptureGroupCheckBuilder;
    headerRegex(arg0: Func<io.gatling.javaapi.core.Session, any>, arg1: Func<io.gatling.javaapi.core.Session, string>): io.gatling.javaapi.core.CheckBuilder$CaptureGroupCheckBuilder;
    status(): io.gatling.javaapi.core.CheckBuilder$Find<int | null>;
    currentLocation(): io.gatling.javaapi.core.CheckBuilder$Find<string>;
    header(arg0: any): io.gatling.javaapi.core.CheckBuilder$MultipleFind<string>;
    header(arg0: string): io.gatling.javaapi.core.CheckBuilder$MultipleFind<string>;
    header(arg0: Func<io.gatling.javaapi.core.Session, any>): io.gatling.javaapi.core.CheckBuilder$MultipleFind<string>;
    sitemap(arg0: string): io.gatling.javaapi.core.FeederBuilder$FileBased<string>;
    Cookie(arg0: string, arg1: string): io.gatling.javaapi.http.AddCookie;
    Cookie(arg0: string, arg1: Func<io.gatling.javaapi.core.Session, string>): io.gatling.javaapi.http.AddCookie;
    Cookie(arg0: Func<io.gatling.javaapi.core.Session, string>, arg1: string): io.gatling.javaapi.http.AddCookie;
    Cookie(arg0: Func<io.gatling.javaapi.core.Session, string>, arg1: Func<io.gatling.javaapi.core.Session, string>): io.gatling.javaapi.http.AddCookie;
    ByteArrayBodyPart(arg0: string, arg1: bytearray): io.gatling.javaapi.http.BodyPart;
    ByteArrayBodyPart(arg0: string, arg1: string): io.gatling.javaapi.http.BodyPart;
    ByteArrayBodyPart(arg0: string, arg1: Func<io.gatling.javaapi.core.Session, bytearray>): io.gatling.javaapi.http.BodyPart;
    ByteArrayBodyPart(arg0: Func<io.gatling.javaapi.core.Session, string>, arg1: bytearray): io.gatling.javaapi.http.BodyPart;
    ByteArrayBodyPart(arg0: Func<io.gatling.javaapi.core.Session, string>, arg1: string): io.gatling.javaapi.http.BodyPart;
    ByteArrayBodyPart(arg0: Func<io.gatling.javaapi.core.Session, string>, arg1: Func<io.gatling.javaapi.core.Session, bytearray>): io.gatling.javaapi.http.BodyPart;
    ElFileBodyPart(arg0: string): io.gatling.javaapi.http.BodyPart;
    ElFileBodyPart(arg0: string, arg1: string): io.gatling.javaapi.http.BodyPart;
    ElFileBodyPart(arg0: string, arg1: Func<io.gatling.javaapi.core.Session, string>): io.gatling.javaapi.http.BodyPart;
    ElFileBodyPart(arg0: Func<io.gatling.javaapi.core.Session, string>): io.gatling.javaapi.http.BodyPart;
    ElFileBodyPart(arg0: Func<io.gatling.javaapi.core.Session, string>, arg1: string): io.gatling.javaapi.http.BodyPart;
    ElFileBodyPart(arg0: Func<io.gatling.javaapi.core.Session, string>, arg1: Func<io.gatling.javaapi.core.Session, string>): io.gatling.javaapi.http.BodyPart;
    PebbleFileBodyPart(arg0: string): io.gatling.javaapi.http.BodyPart;
    PebbleFileBodyPart(arg0: string, arg1: string): io.gatling.javaapi.http.BodyPart;
    PebbleFileBodyPart(arg0: string, arg1: Func<io.gatling.javaapi.core.Session, string>): io.gatling.javaapi.http.BodyPart;
    PebbleFileBodyPart(arg0: Func<io.gatling.javaapi.core.Session, string>): io.gatling.javaapi.http.BodyPart;
    PebbleFileBodyPart(arg0: Func<io.gatling.javaapi.core.Session, string>, arg1: string): io.gatling.javaapi.http.BodyPart;
    PebbleFileBodyPart(arg0: Func<io.gatling.javaapi.core.Session, string>, arg1: Func<io.gatling.javaapi.core.Session, string>): io.gatling.javaapi.http.BodyPart;
    PebbleStringBodyPart(arg0: string): io.gatling.javaapi.http.BodyPart;
    PebbleStringBodyPart(arg0: string, arg1: string): io.gatling.javaapi.http.BodyPart;
    PebbleStringBodyPart(arg0: Func<io.gatling.javaapi.core.Session, string>, arg1: string): io.gatling.javaapi.http.BodyPart;
    RawFileBodyPart(arg0: string): io.gatling.javaapi.http.BodyPart;
    RawFileBodyPart(arg0: string, arg1: string): io.gatling.javaapi.http.BodyPart;
    RawFileBodyPart(arg0: string, arg1: Func<io.gatling.javaapi.core.Session, string>): io.gatling.javaapi.http.BodyPart;
    RawFileBodyPart(arg0: Func<io.gatling.javaapi.core.Session, string>): io.gatling.javaapi.http.BodyPart;
    RawFileBodyPart(arg0: Func<io.gatling.javaapi.core.Session, string>, arg1: string): io.gatling.javaapi.http.BodyPart;
    RawFileBodyPart(arg0: Func<io.gatling.javaapi.core.Session, string>, arg1: Func<io.gatling.javaapi.core.Session, string>): io.gatling.javaapi.http.BodyPart;
    StringBodyPart(arg0: string): io.gatling.javaapi.http.BodyPart;
    StringBodyPart(arg0: string, arg1: string): io.gatling.javaapi.http.BodyPart;
    StringBodyPart(arg0: string, arg1: Func<io.gatling.javaapi.core.Session, string>): io.gatling.javaapi.http.BodyPart;
    StringBodyPart(arg0: Func<io.gatling.javaapi.core.Session, string>): io.gatling.javaapi.http.BodyPart;
    StringBodyPart(arg0: Func<io.gatling.javaapi.core.Session, string>, arg1: string): io.gatling.javaapi.http.BodyPart;
    StringBodyPart(arg0: Func<io.gatling.javaapi.core.Session, string>, arg1: Func<io.gatling.javaapi.core.Session, string>): io.gatling.javaapi.http.BodyPart;
    CookieKey(arg0: string): io.gatling.javaapi.http.GetCookie;
    CookieKey(arg0: Func<io.gatling.javaapi.core.Session, string>): io.gatling.javaapi.http.GetCookie;
    http(arg0: string): io.gatling.javaapi.http.Http;
    http(arg0: Func<io.gatling.javaapi.core.Session, string>): io.gatling.javaapi.http.Http;
    poll(): io.gatling.javaapi.http.Polling;
    Proxy(arg0: string, arg1: int): io.gatling.javaapi.http.Proxy;
    sse(arg0: string): io.gatling.javaapi.http.Sse;
    sse(arg0: string, arg1: string): io.gatling.javaapi.http.Sse;
    ws(arg0: string): io.gatling.javaapi.http.Ws;
    ws(arg0: string, arg1: string): io.gatling.javaapi.http.Ws;
    currentLocationRegex(arg0: Func<io.gatling.javaapi.core.Session, string>): any;
}
export declare const HttpDsl: HttpDslStatic;
interface HttpHeadersStatic {
    readonly class: any;
    equalsIgnoreCase(arg0: any, arg1: any): boolean;
    is100ContinueExpected(arg0: any): boolean;
    isContentLengthSet(arg0: any): boolean;
    isKeepAlive(arg0: any): boolean;
    isTransferEncodingChunked(arg0: any): boolean;
    getIntHeader(arg0: any, arg1: any): int;
    getIntHeader(arg0: any, arg1: any, arg2: int): int;
    getIntHeader(arg0: any, arg1: string): int;
    getIntHeader(arg0: any, arg1: string, arg2: int): int;
    newEntity(arg0: string): any;
    getHeader(arg0: any, arg1: any): string;
    getHeader(arg0: any, arg1: any, arg2: string): string;
    getHeader(arg0: any, arg1: string): string;
    getHeader(arg0: any, arg1: string, arg2: string): string;
    getHost(arg0: any): string;
    getHost(arg0: any, arg1: string): string;
    getDate(arg0: any): any;
    getDate(arg0: any, arg1: any): any;
    getDateHeader(arg0: any, arg1: any): any;
    getDateHeader(arg0: any, arg1: any, arg2: any): any;
    getDateHeader(arg0: any, arg1: string): any;
    getDateHeader(arg0: any, arg1: string, arg2: any): any;
    getContentLength(arg0: any): long;
    getContentLength(arg0: any, arg1: long): long;
    addDateHeader(arg0: any, arg1: any, arg2: any): void;
    addDateHeader(arg0: any, arg1: string, arg2: any): void;
    addHeader(arg0: any, arg1: any, arg2: any): void;
    addHeader(arg0: any, arg1: string, arg2: any): void;
    addIntHeader(arg0: any, arg1: any, arg2: int): void;
    addIntHeader(arg0: any, arg1: string, arg2: int): void;
    clearHeaders(arg0: any): void;
    encodeAscii(arg0: any, arg1: any): void;
    removeHeader(arg0: any, arg1: any): void;
    removeHeader(arg0: any, arg1: string): void;
    removeTransferEncodingChunked(arg0: any): void;
    set100ContinueExpected(arg0: any): void;
    set100ContinueExpected(arg0: any, arg1: boolean): void;
    setContentLength(arg0: any, arg1: long): void;
    setDate(arg0: any, arg1: any): void;
    setDateHeader(arg0: any, arg1: any, arg2: java.lang.Iterable<any>): void;
    setDateHeader(arg0: any, arg1: any, arg2: any): void;
    setDateHeader(arg0: any, arg1: string, arg2: java.lang.Iterable<any>): void;
    setDateHeader(arg0: any, arg1: string, arg2: any): void;
    setHeader(arg0: any, arg1: any, arg2: java.lang.Iterable<any>): void;
    setHeader(arg0: any, arg1: any, arg2: any): void;
    setHeader(arg0: any, arg1: string, arg2: java.lang.Iterable<any>): void;
    setHeader(arg0: any, arg1: string, arg2: any): void;
    setHost(arg0: any, arg1: any): void;
    setHost(arg0: any, arg1: string): void;
    setIntHeader(arg0: any, arg1: any, arg2: int): void;
    setIntHeader(arg0: any, arg1: any, arg2: java.lang.Iterable<int | null>): void;
    setIntHeader(arg0: any, arg1: string, arg2: int): void;
    setIntHeader(arg0: any, arg1: string, arg2: java.lang.Iterable<int | null>): void;
    setKeepAlive(arg0: any, arg1: boolean): void;
    setTransferEncodingChunked(arg0: any): void;
}
export declare const HttpHeaders: HttpHeadersStatic;
interface HttpProtocolBuilder$TypedConditionStatic {
    readonly class: any;
    new (arg0: any): io.gatling.javaapi.http.HttpProtocolBuilder$TypedCondition;
}
export declare const HttpProtocolBuilder$TypedCondition: HttpProtocolBuilder$TypedConditionStatic;
interface HttpProtocolBuilder$UntypedConditionStatic {
    readonly class: any;
    new (arg0: any): io.gatling.javaapi.http.HttpProtocolBuilder$UntypedCondition;
}
export declare const HttpProtocolBuilder$UntypedCondition: HttpProtocolBuilder$UntypedConditionStatic;
interface HttpProtocolBuilderStatic {
    readonly class: any;
    new (arg0: any): io.gatling.javaapi.http.HttpProtocolBuilder;
}
export declare const HttpProtocolBuilder: HttpProtocolBuilderStatic;
interface HttpRequestActionBuilderStatic {
    readonly class: any;
    new (arg0: any): io.gatling.javaapi.http.HttpRequestActionBuilder;
}
export declare const HttpRequestActionBuilder: HttpRequestActionBuilderStatic;
interface HttpResponseStatusStatic {
    readonly class: any;
    new (arg0: int, arg1: string): io.netty.handler.codec.http.HttpResponseStatus;
    parseLine(arg0: any): io.netty.handler.codec.http.HttpResponseStatus;
    parseLine(arg0: any): io.netty.handler.codec.http.HttpResponseStatus;
    parseLine(arg0: string): io.netty.handler.codec.http.HttpResponseStatus;
    valueOf(arg0: int): io.netty.handler.codec.http.HttpResponseStatus;
    valueOf(arg0: int, arg1: string): io.netty.handler.codec.http.HttpResponseStatus;
}
export declare const HttpResponseStatus: HttpResponseStatusStatic;
interface HttpStatic {
    readonly class: any;
}
export declare const Http: HttpStatic;
interface IterableStatic {
    readonly class: any;
    new <T>(arg0: java.lang.Iterable<T>): java.lang.Iterable<T>;
}
export declare const Iterable: IterableStatic;
interface OpenInjectionStep$ConstantRateStatic {
    readonly class: any;
}
export declare const OpenInjectionStep$ConstantRate: OpenInjectionStep$ConstantRateStatic;
interface OpenInjectionStep$RampRateStatic {
    readonly class: any;
}
export declare const OpenInjectionStep$RampRate: OpenInjectionStep$RampRateStatic;
interface OpenInjectionStep$RampStatic {
    readonly class: any;
}
export declare const OpenInjectionStep$Ramp: OpenInjectionStep$RampStatic;
interface OpenInjectionStep$StairsStatic {
    readonly class: any;
}
export declare const OpenInjectionStep$Stairs: OpenInjectionStep$StairsStatic;
interface OpenInjectionStep$StressPeakStatic {
    readonly class: any;
}
export declare const OpenInjectionStep$StressPeak: OpenInjectionStep$StressPeakStatic;
interface OpenInjectionStepStatic {
    readonly class: any;
    atOnceUsers(arg0: int): io.gatling.javaapi.core.OpenInjectionStep;
    nothingFor(arg0: java.time.Duration): io.gatling.javaapi.core.OpenInjectionStep;
}
export declare const OpenInjectionStep: OpenInjectionStepStatic;
interface OptionalStatic {
    readonly class: any;
    empty<T>(): java.util.Optional<T>;
    of<T>(arg0: T): java.util.Optional<T>;
    ofNullable<T>(arg0: T): java.util.Optional<T>;
}
export declare const Optional: OptionalStatic;
interface PacesStatic {
    readonly class: any;
}
export declare const Paces: PacesStatic;
interface PauseType$CustomStatic {
    readonly class: any;
}
export declare const PauseType$Custom: PauseType$CustomStatic;
interface PauseType$NormalWithPercentageDurationStatic {
    readonly class: any;
}
export declare const PauseType$NormalWithPercentageDuration: PauseType$NormalWithPercentageDurationStatic;
interface PauseType$NormalWithStdDevDurationStatic {
    readonly class: any;
}
export declare const PauseType$NormalWithStdDevDuration: PauseType$NormalWithStdDevDurationStatic;
interface PauseType$UniformDurationStatic {
    readonly class: any;
    new (arg0: java.time.Duration): io.gatling.javaapi.core.PauseType$UniformDuration;
}
export declare const PauseType$UniformDuration: PauseType$UniformDurationStatic;
interface PauseType$UniformPercentageStatic {
    readonly class: any;
}
export declare const PauseType$UniformPercentage: PauseType$UniformPercentageStatic;
interface PauseTypeStatic {
    readonly class: any;
}
export declare const PauseType: PauseTypeStatic;
interface PausesStatic {
    readonly class: any;
}
export declare const Pauses: PausesStatic;
interface Polling$EveryStatic {
    readonly class: any;
    new (arg0: any): io.gatling.javaapi.http.Polling$Every;
}
export declare const Polling$Every: Polling$EveryStatic;
interface PollingStatic {
    readonly class: any;
}
export declare const Polling: PollingStatic;
interface PopulationBuilderStatic {
    readonly class: any;
    new (arg0: any): io.gatling.javaapi.core.PopulationBuilder;
}
export declare const PopulationBuilder: PopulationBuilderStatic;
interface ProtocolBuilderStatic {
    readonly class: any;
}
export declare const ProtocolBuilder: ProtocolBuilderStatic;
interface ProxyStatic {
    readonly class: any;
}
export declare const Proxy: ProxyStatic;
interface RampRate$DuringStatic {
    readonly class: any;
}
export declare const RampRate$During: RampRate$DuringStatic;
interface RampRate$RampRateOpenInjectionStepStatic {
    readonly class: any;
    atOnceUsers(arg0: int): io.gatling.javaapi.core.OpenInjectionStep;
    nothingFor(arg0: java.time.Duration): io.gatling.javaapi.core.OpenInjectionStep;
}
export declare const RampRate$RampRateOpenInjectionStep: RampRate$RampRateOpenInjectionStepStatic;
interface RandomSwitch$OnStatic {
    readonly class: any;
}
export declare const RandomSwitch$On: RandomSwitch$OnStatic;
interface RandomSwitchOrElse$OnStatic {
    readonly class: any;
}
export declare const RandomSwitchOrElse$On: RandomSwitchOrElse$OnStatic;
interface RandomSwitchOrElse$OrElseStatic {
    readonly class: any;
}
export declare const RandomSwitchOrElse$OrElse: RandomSwitchOrElse$OrElseStatic;
interface RandomSwitchOrElseStatic {
    readonly class: any;
}
export declare const RandomSwitchOrElse: RandomSwitchOrElseStatic;
interface RandomSwitchStatic {
    readonly class: any;
}
export declare const RandomSwitch: RandomSwitchStatic;
interface RendezVousStatic {
    readonly class: any;
}
export declare const RendezVous: RendezVousStatic;
interface Repeat$OnStatic {
    readonly class: any;
}
export declare const Repeat$On: Repeat$OnStatic;
interface RepeatStatic {
    readonly class: any;
}
export declare const Repeat: RepeatStatic;
interface RequestBodyStatic {
    readonly class: any;
}
export declare const RequestBody: RequestBodyStatic;
interface RequestStatic {
    readonly class: any;
    new (arg0: string, arg1: any, arg2: any, arg3: io.netty.handler.codec.http.HttpHeaders, arg4: java.util.List<any>, arg5: io.gatling.http.client.body.RequestBody, arg6: long, arg7: boolean, arg8: any, arg9: any, arg10: any, arg11: string, arg12: string, arg13: Func<io.gatling.http.client.Request, io.gatling.http.client.Request>, arg14: any, arg15: boolean, arg16: any, arg17: string): io.gatling.http.client.Request;
}
export declare const Request: RequestStatic;
interface ResponseBodyStatic {
    readonly class: any;
    apply(bodyLength: int, chunks: any, charset: any): io.gatling.http.response.ResponseBody;
}
export declare const ResponseBody: ResponseBodyStatic;
interface ResponseStatic {
    readonly class: any;
    new (request: io.gatling.http.client.Request, startTimestamp: long, endTimestamp: long, status: io.netty.handler.codec.http.HttpResponseStatus, headers: io.netty.handler.codec.http.HttpHeaders, body: io.gatling.http.response.ResponseBody, checksums: any, isHttp2: boolean): io.gatling.http.response.Response;
    apply(request: io.gatling.http.client.Request, startTimestamp: long, endTimestamp: long, status: io.netty.handler.codec.http.HttpResponseStatus, headers: io.netty.handler.codec.http.HttpHeaders, body: io.gatling.http.response.ResponseBody, checksums: any, isHttp2: boolean): io.gatling.http.response.Response;
    curried(): any;
    tupled(): any;
    unapply(x$0: io.gatling.http.response.Response): any;
}
export declare const Response: ResponseStatic;
interface RoundRobinSwitch$OnStatic {
    readonly class: any;
}
export declare const RoundRobinSwitch$On: RoundRobinSwitch$OnStatic;
interface RoundRobinSwitchStatic {
    readonly class: any;
}
export declare const RoundRobinSwitch: RoundRobinSwitchStatic;
interface ScenarioBuilderStatic {
    readonly class: any;
}
export declare const ScenarioBuilder: ScenarioBuilderStatic;
interface SessionStatic {
    readonly class: any;
    new (arg0: any): io.gatling.javaapi.core.Session;
}
export declare const Session: SessionStatic;
interface Simulation$SetUpStatic {
    readonly class: any;
}
export declare const Simulation$SetUp: Simulation$SetUpStatic;
interface SimulationStatic {
    readonly class: any;
    new (): io.gatling.javaapi.core.Simulation;
}
export declare const Simulation: SimulationStatic;
interface SseAwaitActionBuilderStatic {
    readonly class: any;
}
export declare const SseAwaitActionBuilder: SseAwaitActionBuilderStatic;
interface SseConnectActionBuilderStatic {
    readonly class: any;
}
export declare const SseConnectActionBuilder: SseConnectActionBuilderStatic;
interface SseMessageCheckStatic {
    readonly class: any;
    new (arg0: any): io.gatling.javaapi.http.SseMessageCheck;
}
export declare const SseMessageCheck: SseMessageCheckStatic;
interface SseSetCheckActionBuilderStatic {
    readonly class: any;
}
export declare const SseSetCheckActionBuilder: SseSetCheckActionBuilderStatic;
interface SseStatic {
    readonly class: any;
}
export declare const Sse: SseStatic;
interface Stairs$CompositeStatic {
    readonly class: any;
    atOnceUsers(arg0: int): io.gatling.javaapi.core.OpenInjectionStep;
    nothingFor(arg0: java.time.Duration): io.gatling.javaapi.core.OpenInjectionStep;
}
export declare const Stairs$Composite: Stairs$CompositeStatic;
interface Stairs$TimesStatic {
    readonly class: any;
}
export declare const Stairs$Times: Stairs$TimesStatic;
interface StreamStatic {
    readonly class: any;
    builder(): any;
    concat<T>(arg0: java.util.stream.Stream<T>, arg1: java.util.stream.Stream<T>): java.util.stream.Stream<T>;
    empty<T>(): java.util.stream.Stream<T>;
    generate<T>(arg0: Supplier<T>): java.util.stream.Stream<T>;
    iterate<T>(arg0: T, arg1: Predicate<T>, arg2: UnaryOperator<T>): java.util.stream.Stream<T>;
    iterate<T>(arg0: T, arg1: UnaryOperator<T>): java.util.stream.Stream<T>;
    of<T>(arg0: T): java.util.stream.Stream<T>;
    of<T>(...arg0: T[]): java.util.stream.Stream<T>;
    ofNullable<T>(arg0: T): java.util.stream.Stream<T>;
}
export declare const Stream: StreamStatic;
interface StringStatic {
    readonly class: any;
    new (arg0: any): string;
    new (arg0: bytearray, arg1: int, arg2: int, arg3: any): string;
    new (arg0: bytearray, arg1: string): string;
    new (arg0: bytearray, arg1: any): string;
    new (arg0: bytearray, arg1: int, arg2: int): string;
    new (arg0: bytearray): string;
    new (arg0: any): string;
    new (arg0: chararray, arg1: int, arg2: int): string;
    new (arg0: chararray): string;
    new (arg0: string): string;
    new (): string;
    new (arg0: bytearray, arg1: int, arg2: int, arg3: string): string;
    new (arg0: bytearray, arg1: int): string;
    new (arg0: bytearray, arg1: int, arg2: int, arg3: int): string;
    new (arg0: [int], arg1: int, arg2: int): string;
    copyValueOf(arg0: chararray): string;
    copyValueOf(arg0: chararray, arg1: int, arg2: int): string;
    format(arg0: string, ...arg1: any[]): string;
    format(arg0: any, arg1: string, ...arg2: any[]): string;
    join(arg0: any, ...arg1: any[]): string;
    join(arg0: any, arg1: java.lang.Iterable<any>): string;
    valueOf(arg0: boolean): string;
    valueOf(arg0: any): string;
    valueOf(arg0: chararray): string;
    valueOf(arg0: chararray, arg1: int, arg2: int): string;
    valueOf(arg0: double): string;
    valueOf(arg0: float): string;
    valueOf(arg0: int): string;
    valueOf(arg0: any): string;
    valueOf(arg0: long): string;
}
export declare const String: StringStatic;
interface StructureBuilderStatic {
    readonly class: any;
}
export declare const StructureBuilder: StructureBuilderStatic;
interface SystemStatic {
    readonly class: any;
    console(): any;
    getSecurityManager(): any;
    clearProperty(arg0: string): string;
    getProperty(arg0: string): string;
    getProperty(arg0: string, arg1: string): string;
    getenv(arg0: string): string;
    lineSeparator(): string;
    setProperty(arg0: string, arg1: string): string;
    getLogger(arg0: string): any;
    getLogger(arg0: string, arg1: any): any;
    inheritedChannel(): any;
    getenv(): java.util.Map<string, string>;
    getProperties(): any;
    identityHashCode(arg0: any): int;
    mapLibraryName(arg0: string): string;
    currentTimeMillis(): long;
    nanoTime(): long;
    arraycopy(arg0: any, arg1: int, arg2: any, arg3: int, arg4: int): void;
    exit(arg0: int): void;
    gc(): void;
    load(arg0: string): void;
    loadLibrary(arg0: string): void;
    runFinalization(): void;
    setErr(arg0: any): void;
    setIn(arg0: any): void;
    setOut(arg0: any): void;
    setProperties(arg0: any): void;
    setSecurityManager(arg0: any): void;
}
export declare const System: SystemStatic;
interface TemporalUnitStatic {
    readonly class: any;
}
export declare const TemporalUnit: TemporalUnitStatic;
interface ThrottleStep$ReachIntermediateStatic {
    readonly class: any;
}
export declare const ThrottleStep$ReachIntermediate: ThrottleStep$ReachIntermediateStatic;
interface ThrottleStepStatic {
    readonly class: any;
}
export declare const ThrottleStep: ThrottleStepStatic;
interface UniformRandomSwitch$OnStatic {
    readonly class: any;
}
export declare const UniformRandomSwitch$On: UniformRandomSwitch$OnStatic;
interface UniformRandomSwitchStatic {
    readonly class: any;
}
export declare const UniformRandomSwitch: UniformRandomSwitchStatic;
interface WithKey$ThenStatic {
    readonly class: any;
    new (arg0: any): io.gatling.javaapi.core.WithKey$Then;
}
export declare const WithKey$Then: WithKey$ThenStatic;
interface WithWeight$ThenStatic {
    readonly class: any;
    new (arg0: double): io.gatling.javaapi.core.WithWeight$Then;
}
export declare const WithWeight$Then: WithWeight$ThenStatic;
interface WsAwaitActionBuilderStatic {
    readonly class: any;
}
export declare const WsAwaitActionBuilder: WsAwaitActionBuilderStatic;
interface WsFrameCheckStatic {
    readonly class: any;
}
export declare const WsFrameCheck: WsFrameCheckStatic;
interface WsSendBinaryActionBuilderStatic {
    readonly class: any;
}
export declare const WsSendBinaryActionBuilder: WsSendBinaryActionBuilderStatic;
interface WsSendTextActionBuilderStatic {
    readonly class: any;
}
export declare const WsSendTextActionBuilder: WsSendTextActionBuilderStatic;
interface WsStatic {
    readonly class: any;
}
export declare const Ws: WsStatic;
export {};
